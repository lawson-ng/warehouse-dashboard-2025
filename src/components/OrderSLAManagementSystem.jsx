/* eslint-disable no-undef */
import { useState, useEffect, useRef } from "react";
import {
  ChevronDown,
  ChevronUp,
  Package,
  Clock,
  AlertTriangle,
  Check,
  X,
  Printer,
  FileText,
  ArrowRight,
  Search,
  Filter,
  RefreshCw,
  Zap,
  Settings,
  User,
  Edit,
  Calendar,
  Download,
  Upload,
  MapPin,
  Users,
  History,
  Save,
  Activity,
  BarChart2,
  TrendingUp,
  Eye,
  PlusCircle,
  FileCheck,
  Trash2,
  CornerDownRight,
  ExternalLink,
} from "lucide-react";

const initialMetrics = {
  totalOrders: 152,
  pendingOrders: 45,
  processingOrders: 35,
  completedOrders: 72,
  p1Orders: 12,
  p2Orders: 25,
  avgPickingTime: 4.3,
  slaCompliance: 92,
  staffUtilization: 78,
  autoAllocationSuccess: 86,
};

const OrderSLAManagementSystem = () => {
  // State qu·∫£n l√Ω ƒë∆°n h√†ng
  const [orders, setOrders] = useState([]);
  const [selectedOrders, setSelectedOrders] = useState([]);
  const [metrics, setMetrics] = useState(initialMetrics);

  // State cho nh√¢n vi√™n
  const [staff, setStaff] = useState([
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn A",
      role: "Tr∆∞·ªüng ca",
      area: "A",
      skills: ["vali", "balo", "ƒë√≥ng g√≥i"],
      status: "busy",
      currentOrder: "SO09032025:0845541",
      assignedOrders: ["SO09032025:0845541", "SO09032025:0845543"],
      orderCount: 8,
      efficiency: 98,
      maxCapacity: 10,
      currentLoad: 2,
    },
    {
      id: 2,
      name: "Tr·∫ßn Th·ªã B",
      role: "Nh√¢n vi√™n",
      area: "A",
      skills: ["vali", "ph·ª• ki·ªán"],
      status: "busy",
      currentOrder: "SO09032025:0845547",
      assignedOrders: ["SO09032025:0845547"],
      orderCount: 12,
      efficiency: 95,
      maxCapacity: 8,
      currentLoad: 1,
    },
    {
      id: 3,
      name: "L√™ VƒÉn C",
      role: "Nh√¢n vi√™n",
      area: "B",
      skills: ["balo", "ph·ª• ki·ªán", "ƒë√≥ng g√≥i"],
      status: "available",
      currentOrder: null,
      assignedOrders: [],
      orderCount: 15,
      efficiency: 92,
      maxCapacity: 8,
      currentLoad: 0,
    },
    {
      id: 4,
      name: "Ph·∫°m Th·ªã D",
      role: "Nh√¢n vi√™n",
      area: "C",
      skills: ["QC", "ƒë√≥ng g√≥i"],
      status: "available",
      currentOrder: null,
      assignedOrders: [],
      orderCount: 10,
      efficiency: 97,
      maxCapacity: 9,
      currentLoad: 0,
    },
  ]);

  // State giao di·ªán
  const [isLoading, setIsLoading] = useState(false);
  const [tab, setTab] = useState("dashboard");
  const [selectedPriority, setSelectedPriority] = useState("all");
  const [selectedArea, setSelectedArea] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [orderSort, setOrderSort] = useState({
    field: "priority",
    direction: "asc",
  });
  const [refreshInterval, setRefreshInterval] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [showPrintModal, setShowPrintModal] = useState(false);
  const [printType, setPrintType] = useState("order"); // 'order' or 'picking'
  const [showStaffPanel, setShowStaffPanel] = useState(false);
  const [showAllocationPanel, setShowAllocationPanel] = useState(false);
  const [isAutoAssigning, setIsAutoAssigning] = useState(false);
  const [staffFilter, setStaffFilter] = useState("all");

  // State l·ªãch s·ª≠ ho·∫°t ƒë·ªông
  const [activityHistory, setActivityHistory] = useState([]);
  const [showActivityHistory, setShowActivityHistory] = useState(false);

  // State c·∫•u h√¨nh
  const [slaConfig, setSlaConfig] = useState({
    p1Hours: 2,
    p2Hours: 4,
    p3Hours: 8,
    defaultSLA: 24,
  });

  const [allocationConfig, setAllocationConfig] = useState({
    autoAssignInterval: 5,
    p1MaxPerStaff: 3,
    balanceWorkload: true,
    prioritizeLocation: true,
    reassignOnCompletion: true,
  });

  const fileInputRef = useRef(null);
  const lastUpdatedRef = useRef(new Date());

  // Gi·∫£ l·∫≠p t·∫£i ƒë∆°n h√†ng t·ª´ file
  const loadSampleOrders = () => {
    setIsLoading(true);

    // X·ª≠ l√Ω timeout ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng t·∫£i
    setTimeout(() => {
      // T·∫°o d·ªØ li·ªáu m·∫´u d·ª±a tr√™n file JSON ƒë√£ upload
      const sampleOrders = [
        {
          id: "434819",
          name: "SO09032025:0845541",
          transporter: "S - SPX Express",
          customer: "Shopee",
          phone: "18002000",
          amount_total: "699000",
          cod_total: "0",
          shipment_id: "2503094EA6YXJT",
          shipment_code: "SPXVN057423890073",
          ecom_order_weight: "12635",
          ecom_recipient_code: "HN-20-14-PD01",
          ecom_cod_amount: "0",
          date_order: "2025-03-09 00:08:52",
          address:
            "******h·∫ªm 193/64/87 ph√∫ di·ªÖn, Ph∆∞·ªùng Ph√∫ Di·ªÖn, Qu·∫≠n B·∫Øc T·ª´ Li√™m, H√† N·ªôi",
          district: "Qu·∫≠n B·∫Øc T·ª´ Li√™m",
          city: "H√† N·ªôi",
          ward: "Ph√∫ Di·ªÖn",
          note: ".2503094EA6YXJT",
          detail:
            "Valinice Yari ID2041_20 S Orange(1), Mia Luggage Tag S Orange(1), Cerave Kem d∆∞·ª°ng ·∫©m 7ml S Blue/White(1)",
          status: "pending",
          sla: {
            code: "P1",
            label: "P1 - G·∫•p üöÄ",
            color: "bg-red-100 text-red-800",
            description: "C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c",
          },
          timeLeft: "01:15:22",
          priority: 95,
          productType: "vali",
          complexity: "nhi·ªÅu s·∫£n ph·∫©m",
          location: "HN-20-14-PD01",
          assignedTo: 1,
          viewTimestamp: null,
          printTimestamp: null,
        },
        {
          id: "434821",
          name: "SO09032025:0845543",
          transporter: "S - Giao h√†ng nhanh",
          customer: "Shopee",
          phone: "18002000",
          amount_total: "169000",
          cod_total: "0",
          shipment_id: "2503094EYPMYK9",
          shipment_code: "G8E6X7C3",
          ecom_order_weight: "250",
          ecom_recipient_code: "290-A-05-A3",
          ecom_cod_amount: "0",
          date_order: "2025-03-09 00:19:10",
          address:
            "****** p2, 1 Ch√¢u VƒÉn Li√™m, Ph∆∞·ªùng Ph√∫ ƒê√¥, Qu·∫≠n Nam T·ª´ Li√™m, H√† N·ªôi",
          district: "Qu·∫≠n Nam T·ª´ Li√™m",
          city: "H√† N·ªôi",
          ward: "Ph√∫ ƒê√¥",
          note: ".2503094EYPMYK9",
          detail:
            "The Travel Star Clearguard Cover_20 S Black(1), Cerave Kem d∆∞·ª°ng ·∫©m 7ml S Blue/White(1)",
          status: "pending",
          sla: {
            code: "P1",
            label: "P1 - G·∫•p üöÄ",
            color: "bg-red-100 text-red-800",
            description: "C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c",
          },
          timeLeft: "01:25:05",
          priority: 92,
          productType: "ph·ª• ki·ªán",
          complexity: "nhi·ªÅu s·∫£n ph·∫©m",
          location: "290-A-05-A3",
          assignedTo: 1,
          viewTimestamp: null,
          printTimestamp: null,
        },
        {
          id: "434823",
          name: "SO09032025:0845547",
          transporter: "S - J&T Express",
          customer: "Shopee",
          phone: "18002000",
          amount_total: "1299000",
          cod_total: "0",
          shipment_id: "2503094E45POF2",
          shipment_code: "JT1234560025",
          ecom_order_weight: "8500",
          ecom_recipient_code: "HN-30-22-BA04",
          ecom_cod_amount: "0",
          date_order: "2025-03-09 00:25:30",
          address: "****** Chung c∆∞ CT2, KƒêT VƒÉn Kh√™, H√† ƒê√¥ng, H√† N·ªôi",
          district: "H√† ƒê√¥ng",
          city: "H√† N·ªôi",
          ward: "VƒÉn Kh√™",
          note: ".2503094E45POF2",
          detail: "Balore Rio BR0224_23 M Blue(1)",
          status: "processing",
          sla: {
            code: "P1",
            label: "P1 - G·∫•p üöÄ",
            color: "bg-red-100 text-red-800",
            description: "C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c",
          },
          timeLeft: "00:55:12",
          priority: 98,
          productType: "vali",
          complexity: "ƒë∆°n gi·∫£n",
          location: "HN-30-22-BA04",
          assignedTo: 2,
          viewTimestamp: new Date(Date.now() - 600000).toISOString(), // 10 ph√∫t tr∆∞·ªõc
          printTimestamp: null,
        },
        {
          id: "434825",
          name: "SO09032025:0855401",
          transporter: "S - Shopee Express",
          customer: "Shopee",
          amount_total: "249000",
          shipment_id: "2503094EYPD453",
          shipment_code: "SPXEX8764536",
          ecom_recipient_code: "290-B-12-C5",
          date_order: "2025-03-09 01:14:22",
          address: "****** 43 Nguy·ªÖn Ch√≠ Thanh, ƒê·ªëng ƒêa, H√† N·ªôi",
          detail: "T√∫i ƒëeo ch√©o Foldaway(1), V√≠ mini Compact(1)",
          status: "pending",
          sla: {
            code: "P2",
            label: "P2 - C·∫£nh b√°o ‚ö†Ô∏è",
            color: "bg-yellow-100 text-yellow-800",
            description: "Kh√¥ng th·ªÉ tr√¨ ho√£n qu√° l√¢u",
          },
          timeLeft: "02:45:33",
          priority: 85,
          productType: "ph·ª• ki·ªán",
          complexity: "nhi·ªÅu s·∫£n ph·∫©m",
          location: "290-B-12-C5",
        },
        {
          id: "434827",
          name: "SO09032025:0855490",
          transporter: "S - Ninja Van",
          customer: "TikTok",
          amount_total: "1099000",
          shipment_id: "2503094E5PP782",
          shipment_code: "NJVAN763523",
          ecom_recipient_code: "300-C-08-D2",
          date_order: "2025-03-09 01:30:15",
          address: "****** 25 Tr∆∞·ªùng Chinh, Thanh Xu√¢n, H√† N·ªôi",
          detail: "Set va li Traveler 24' (1), Tag h√†nh l√Ω Mini (2)",
          status: "pending",
          sla: {
            code: "P2",
            label: "P2 - C·∫£nh b√°o ‚ö†Ô∏è",
            color: "bg-yellow-100 text-yellow-800",
            description: "Kh√¥ng th·ªÉ tr√¨ ho√£n qu√° l√¢u",
          },
          timeLeft: "03:10:45",
          priority: 80,
          productType: "vali",
          complexity: "ƒë∆°n gi·∫£n",
          location: "300-C-08-D2",
        },
        {
          id: "434829",
          name: "SO09032025:0855499",
          transporter: "S - Giao h√†ng nhanh",
          customer: "Lazada",
          amount_total: "329000",
          shipment_id: "2503094EYPJH12",
          shipment_code: "GHN9977651",
          ecom_recipient_code: "290-D-15-A8",
          date_order: "2025-03-09 02:05:33",
          address: "****** 112 L√°ng H·∫°, ƒê·ªëng ƒêa, H√† N·ªôi",
          detail: "Balo Lightweight Compact(1)",
          status: "pending",
          sla: {
            code: "P3",
            label: "P3 - B√¨nh th∆∞·ªùng ‚úÖ",
            color: "bg-green-100 text-green-800",
            description: "X·ª≠ l√Ω theo l·ªô tr√¨nh h·ª£p l√Ω",
          },
          timeLeft: "05:40:15",
          priority: 65,
          productType: "balo",
          complexity: "ƒë∆°n gi·∫£n",
          location: "290-D-15-A8",
        },
        {
          id: "434831",
          name: "SO09032025:0855512",
          transporter: "S - J&T Express",
          customer: "TikTok",
          amount_total: "459000",
          shipment_id: "2503094EFC1209",
          shipment_code: "JT9987652",
          ecom_recipient_code: "300-A-03-B6",
          date_order: "2025-03-09 02:15:40",
          address: "****** 78 Tr·∫ßn Duy H∆∞ng, C·∫ßu Gi·∫•y, H√† N·ªôi",
          detail: "T√∫i du l·ªãch Weekender(1), B√¨nh gi·ªØ nhi·ªát Travel Mug(1)",
          status: "completed",
          sla: {
            code: "P3",
            label: "P3 - B√¨nh th∆∞·ªùng ‚úÖ",
            color: "bg-green-100 text-green-800",
            description: "X·ª≠ l√Ω theo l·ªô tr√¨nh h·ª£p l√Ω",
          },
          timeLeft: "06:05:22",
          priority: 60,
          productType: "ph·ª• ki·ªán",
          complexity: "nhi·ªÅu s·∫£n ph·∫©m",
          location: "300-A-03-B6",
        },
        {
          id: "434833",
          name: "SO09032025:0855525",
          transporter: "S - Viettel Post",
          customer: "Shopee",
          amount_total: "1899000",
          shipment_id: "2503094EPM5643",
          shipment_code: "VTP7651234",
          ecom_recipient_code: "HN-15-05-CD02",
          date_order: "2025-03-09 02:45:10",
          address: "****** 224 Minh Khai, Hai B√† Tr∆∞ng, H√† N·ªôi",
          detail: "Vali Explorer Pro 28'(1), B·ªô kh√≥a TSA(1), √Åo tr√πm vali(1)",
          status: "pending",
          sla: {
            code: "P3",
            label: "P3 - B√¨nh th∆∞·ªùng ‚úÖ",
            color: "bg-green-100 text-green-800",
            description: "X·ª≠ l√Ω theo l·ªô tr√¨nh h·ª£p l√Ω",
          },
          timeLeft: "06:25:55",
          priority: 55,
          productType: "vali",
          complexity: "nhi·ªÅu s·∫£n ph·∫©m",
          location: "HN-15-05-CD02",
        },
        {
          id: "434835",
          name: "SO09032025:0855533",
          transporter: "S - Shopee Express",
          customer: "Shopee",
          amount_total: "259000",
          shipment_id: "2503094EKLD098",
          shipment_code: "SPXEX8764123",
          ecom_recipient_code: "290-B-08-A3",
          date_order: "2025-03-09 03:15:05",
          address: "****** 56 L√™ VƒÉn L∆∞∆°ng, Thanh Xu√¢n, H√† N·ªôi",
          detail: "V√≠ h·ªô chi·∫øu Premium(1)",
          status: "pending",
          sla: {
            code: "P4",
            label: "P4 - Ch·ªù x·ª≠ l√Ω üïí",
            color: "bg-blue-100 text-blue-800",
            description: "C√≥ th·ªÉ l√πi l·∫°i khi thu·∫≠n ti·ªán",
          },
          timeLeft: "23:45:10",
          priority: 45,
          productType: "ph·ª• ki·ªán",
          complexity: "ƒë∆°n gi·∫£n",
          location: "290-B-08-A3",
        },
        {
          id: "434837",
          name: "SO09032025:0855544",
          transporter: "S - Giao h√†ng ti·∫øt ki·ªám",
          customer: "TikTok",
          amount_total: "2299000",
          shipment_id: "2503094EPO9081",
          shipment_code: "GHTK6453231",
          ecom_recipient_code: "HN-25-18-AE07",
          date_order: "2025-03-09 03:30:45",
          address: "****** 145 Nguy·ªÖn Tu√¢n, Thanh Xu√¢n, H√† N·ªôi",
          detail: "Set vali gia ƒë√¨nh (3 size)(1)",
          status: "pending",
          sla: {
            code: "P4",
            label: "P4 - Ch·ªù x·ª≠ l√Ω üïí",
            color: "bg-blue-100 text-blue-800",
            description: "C√≥ th·ªÉ l√πi l·∫°i khi thu·∫≠n ti·ªán",
          },
          timeLeft: "23:55:33",
          priority: 40,
          productType: "vali",
          complexity: "ph·ª©c t·∫°p",
          location: "HN-25-18-AE07",
        },
      ];

      setOrders(sampleOrders);

      // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
      addToActivityHistory({
        type: "upload",
        timestamp: new Date().toISOString(),
        details: `T·∫£i l√™n ${sampleOrders.length} ƒë∆°n h√†ng`,
      });

      setIsLoading(false);
    }, 800);
  };

  // X·ª≠ l√Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t
  useEffect(() => {
    if (autoRefresh && orders.length > 0) {
      const interval = setInterval(() => {
        updateRealTimeData();
      }, 30000); // C·∫≠p nh·∫≠t m·ªói 30 gi√¢y

      setRefreshInterval(interval);
      return () => clearInterval(interval);
    } else if (refreshInterval) {
      clearInterval(refreshInterval);
      setRefreshInterval(null);
    }
  }, [autoRefresh, orders]);

  // Load d·ªØ li·ªáu khi component ƒë∆∞·ª£c t·∫°o
  useEffect(() => {
    loadSampleOrders();

    // Th√™m m·ªôt s·ªë ho·∫°t ƒë·ªông m·∫´u v√†o l·ªãch s·ª≠
    const sampleActivities = [
      {
        type: "system",
        timestamp: new Date(Date.now() - 3600000).toISOString(),
        details: "Kh·ªüi ƒë·ªông h·ªá th·ªëng Qu·∫£n l√Ω ƒê∆°n SLA",
      },
      {
        type: "auto_assign",
        orderId: "434819",
        orderName: "SO09032025:0845541",
        staffId: 1,
        staffName: "Nguy·ªÖn VƒÉn A",
        timestamp: new Date(Date.now() - 3000000).toISOString(),
        details: "T·ª± ƒë·ªông g√°n ƒë∆°n SO09032025:0845541 cho Nguy·ªÖn VƒÉn A",
      },
    ];

    setActivityHistory(sampleActivities);
  }, []);

  // C·∫≠p nh·∫≠t d·ªØ li·ªáu theo th·ªùi gian th·ª±c
  const updateRealTimeData = () => {
    // Ghi log c·∫≠p nh·∫≠t d·ªØ li·ªáu
    addToActivityHistory({
      type: "system_update",
      timestamp: new Date().toISOString(),
      details: `C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªùi gian th·ª±c theo SLA`,
    });

    // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i cho ƒë∆°n h√†ng
    setOrders((prevOrders) =>
      prevOrders.map((order) => {
        if (order.status === "completed") return order;

        // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i
        let timeLeft = order.timeLeft;
        const [hours, minutes, seconds] = timeLeft.split(":").map(Number);
        let totalSeconds = hours * 3600 + minutes * 60 + seconds - 30;

        if (totalSeconds < 0) {
          totalSeconds = 0;

          // ƒê∆°n ƒë√£ h·∫øt th·ªùi gian nh∆∞ng ch∆∞a x·ª≠ l√Ω -> n√¢ng ƒë·ªô ∆∞u ti√™n
          if (order.status !== "completed" && order.sla.code !== "P1") {
            order.sla = {
              code: "P1",
              label: "P1 - G·∫•p üöÄ",
              color: "bg-red-100 text-red-800",
              description: "C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c",
            };
            order.priority = 99;

            // Th√™m v√†o l·ªãch s·ª≠
            addToActivityHistory({
              type: "sla_escalation",
              orderId: order.id,
              orderName: order.name,
              timestamp: new Date().toISOString(),
              details: `ƒê∆°n ${order.name} ƒë√£ qu√° h·∫°n - n√¢ng c·∫•p l√™n P1`,
            });
          }
        }

        const newHours = Math.floor(totalSeconds / 3600);
        const newMinutes = Math.floor((totalSeconds % 3600) / 60);
        const newSeconds = totalSeconds % 60;

        timeLeft = `${String(newHours).padStart(2, "0")}:${String(newMinutes).padStart(2, "0")}:${String(newSeconds).padStart(2, "0")}`;

        // Gi·∫£m ƒë·ªô ∆∞u ti√™n ng·∫´u nhi√™n cho m·ªôt s·ªë ƒë∆°n ƒë·ªÉ t·∫°o th·ª±c t·∫ø
        const priority = Math.max(
          1,
          order.priority -
            (Math.random() > 0.7 ? Math.floor(Math.random() * 3) : 0)
        );

        return {
          ...order,
          timeLeft,
          priority,
        };
      })
    );

    // C·∫≠p nh·∫≠t c√°c metrics
    setMetrics((prev) => ({
      ...prev,
      pendingOrders: Math.max(
        0,
        prev.pendingOrders - (Math.random() > 0.7 ? 1 : 0)
      ),
      processingOrders: Math.max(
        0,
        prev.processingOrders + (Math.random() > 0.5 ? 1 : -1)
      ),
      completedOrders: prev.completedOrders + (Math.random() > 0.6 ? 1 : 0),
      p1Orders: Math.max(0, prev.p1Orders + (Math.random() > 0.8 ? 1 : -1)),
      staffUtilization: Math.min(
        100,
        Math.max(60, prev.staffUtilization + (Math.random() > 0.5 ? 1 : -1))
      ),
    }));

    // C·∫≠p nh·∫≠t th·ªùi gian c·∫≠p nh·∫≠t g·∫ßn nh·∫•t
    lastUpdatedRef.current = new Date();
  };

  // Th√™m ho·∫°t ƒë·ªông v√†o l·ªãch s·ª≠
  const addToActivityHistory = (activity) => {
    setActivityHistory((prev) => [activity, ...prev]);
  };

  // T·ª± ƒë·ªông ph√¢n b·ªï ƒë∆°n h√†ng
  const autoAssignOrders = () => {
    if (isAutoAssigning) return;

    setIsAutoAssigning(true);

    // Th·ª±c hi·ªán ph√¢n b·ªï t·ª± ƒë·ªông sau 1 gi√¢y (gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω)
    setTimeout(() => {
      // L·∫•y danh s√°ch ƒë∆°n ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng
      const unassignedOrders = orders.filter(
        (order) => order.status === "pending" && !order.assignedTo
      );

      if (unassignedOrders.length === 0) {
        setIsAutoAssigning(false);
        return;
      }

      // S·∫Øp x·∫øp nh√¢n vi√™n theo tr·∫°ng th√°i v√† kh·∫£ nƒÉng
      const sortedStaff = [...staff].sort((a, b) => {
        // ∆Øu ti√™n nh√¢n vi√™n s·∫µn s√†ng
        if (a.status === "available" && b.status !== "available") return -1;
        if (a.status !== "available" && b.status === "available") return 1;

        // Sau ƒë√≥ ∆∞u ti√™n nh√¢n vi√™n c√≤n kh·∫£ nƒÉng nh·∫≠n ƒë∆°n
        const aCapacity = a.maxCapacity - a.currentLoad;
        const bCapacity = b.maxCapacity - b.currentLoad;
        return bCapacity - aCapacity;
      });

      // S·∫Øp x·∫øp ƒë∆°n h√†ng theo ƒë·ªô ∆∞u ti√™n
      const sortedOrders = [...unassignedOrders].sort((a, b) => {
        // P1 lu√¥n ƒë∆∞·ª£c ∆∞u ti√™n cao nh·∫•t
        if (a.sla.code === "P1" && b.sla.code !== "P1") return -1;
        if (a.sla.code !== "P1" && b.sla.code === "P1") return 1;

        // Ti·∫øp theo l√† P2
        if (a.sla.code === "P2" && b.sla.code !== "P2") return -1;
        if (a.sla.code !== "P2" && b.sla.code === "P2") return 1;

        // Sau ƒë√≥ l√† ƒë·ªô ∆∞u ti√™n
        return b.priority - a.priority;
      });

      // Th·ª±c hi·ªán ph√¢n b·ªï
      const newOrders = [...orders];
      const newStaff = [...staff];

      sortedOrders.forEach((order) => {
        // T√¨m nh√¢n vi√™n ph√π h·ª£p
        const availableStaff = sortedStaff.find((s) => {
          // Ki·ªÉm tra c√≤n kh·∫£ nƒÉng nh·∫≠n ƒë∆°n
          if (s.currentLoad >= s.maxCapacity) return false;

          // Ki·ªÉm tra ƒë∆°n P1 c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n kh√¥ng
          if (order.sla.code === "P1") {
            const p1Count = s.assignedOrders.filter((orderId) => {
              const orderObj = newOrders.find((o) => o.id === orderId);
              return orderObj && orderObj.sla.code === "P1";
            }).length;

            if (p1Count >= allocationConfig.p1MaxPerStaff) return false;
          }

          // Ki·ªÉm tra k·ªπ nƒÉng ph√π h·ª£p v·ªõi lo·∫°i s·∫£n ph·∫©m
          if (allocationConfig.prioritizeSkills) {
            if (order.productType === "vali" && !s.skills.includes("vali"))
              return false;
            if (order.productType === "balo" && !s.skills.includes("balo"))
              return false;
            if (
              order.productType === "ph·ª• ki·ªán" &&
              !s.skills.includes("ph·ª• ki·ªán")
            )
              return false;
          }

          // Ki·ªÉm tra khu v·ª±c
          if (allocationConfig.prioritizeLocation) {
            const orderArea = order.location.split("-")[0];
            // Tr∆∞·ªüng ca c√≥ th·ªÉ x·ª≠ l√Ω m·ªçi khu v·ª±c
            if (s.role !== "Tr∆∞·ªüng ca" && s.area !== orderArea) return false;
          }

          return true;
        });

        if (availableStaff) {
          // T√¨m index c·ªßa nh√¢n vi√™n ƒë∆∞·ª£c ch·ªçn
          const staffIndex = newStaff.findIndex(
            (s) => s.id === availableStaff.id
          );

          // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
          const orderIndex = newOrders.findIndex((o) => o.id === order.id);
          if (orderIndex !== -1) {
            newOrders[orderIndex] = {
              ...newOrders[orderIndex],
              assignedTo: availableStaff.id,
              status: "processing",
            };
          }

          // C·∫≠p nh·∫≠t nh√¢n vi√™n
          newStaff[staffIndex] = {
            ...newStaff[staffIndex],
            status: "busy",
            currentOrder: newStaff[staffIndex].currentOrder || order.id,
            assignedOrders: [...newStaff[staffIndex].assignedOrders, order.id],
            currentLoad: newStaff[staffIndex].currentLoad + 1,
          };

          // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
          addToActivityHistory({
            type: "auto_assign",
            orderId: order.id,
            orderName: order.name,
            staffId: availableStaff.id,
            staffName: availableStaff.name,
            timestamp: new Date().toISOString(),
            details: `T·ª± ƒë·ªông g√°n ƒë∆°n ${order.name} cho ${availableStaff.name}`,
          });
        }
      });

      setOrders(newOrders);
      setStaff(newStaff);
      setIsAutoAssigning(false);
    }, 1000);
  };

  // Ph√¢n c√¥ng ƒë∆°n theo c√°ch th·ªß c√¥ng
  const assignOrderToStaff = (orderId, staffId) => {
    // T√¨m ƒë∆°n h√†ng c·∫ßn ph√¢n c√¥ng
    const orderIndex = orders.findIndex((o) => o.id === orderId);
    if (orderIndex === -1) return;

    // T√¨m nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng
    const staffIndex = staff.findIndex((s) => s.id === staffId);
    if (staffIndex === -1) return;

    // Ki·ªÉm tra nh√¢n vi√™n c√≤n kh·∫£ nƒÉng nh·∫≠n ƒë∆°n
    if (staff[staffIndex].currentLoad >= staff[staffIndex].maxCapacity) {
      alert("Nh√¢n vi√™n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë ƒë∆°n c√≥ th·ªÉ x·ª≠ l√Ω!");
      return;
    }

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    const updatedOrders = [...orders];
    updatedOrders[orderIndex] = {
      ...updatedOrders[orderIndex],
      assignedTo: staffId,
      status: "processing",
    };

    // C·∫≠p nh·∫≠t nh√¢n vi√™n
    const updatedStaff = [...staff];
    updatedStaff[staffIndex] = {
      ...updatedStaff[staffIndex],
      status: "busy",
      currentOrder: updatedStaff[staffIndex].currentOrder || orderId,
      assignedOrders: [...updatedStaff[staffIndex].assignedOrders, orderId],
      currentLoad: updatedStaff[staffIndex].currentLoad + 1,
    };

    setOrders(updatedOrders);
    setStaff(updatedStaff);

    // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
    addToActivityHistory({
      type: "manual_assign",
      orderId,
      orderName: orders[orderIndex].name,
      staffId,
      staffName: staff[staffIndex].name,
      timestamp: new Date().toISOString(),
      details: `Th·ªß c√¥ng g√°n ƒë∆°n ${orders[orderIndex].name} cho ${staff[staffIndex].name}`,
    });
  };

  // H·ªßy ph√¢n c√¥ng ƒë∆°n h√†ng
  const unassignOrder = (orderId, staffId) => {
    // T√¨m ƒë∆°n h√†ng c·∫ßn h·ªßy ph√¢n c√¥ng
    const orderIndex = orders.findIndex((o) => o.id === orderId);
    if (orderIndex === -1) return;

    // T√¨m nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng
    const staffIndex = staff.findIndex((s) => s.id === staffId);
    if (staffIndex === -1) return;

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    const updatedOrders = [...orders];
    updatedOrders[orderIndex] = {
      ...updatedOrders[orderIndex],
      assignedTo: null,
      status: "pending",
    };

    // C·∫≠p nh·∫≠t nh√¢n vi√™n
    const updatedStaff = [...staff];
    const assignedOrders = updatedStaff[staffIndex].assignedOrders.filter(
      (id) => id !== orderId
    );

    updatedStaff[staffIndex] = {
      ...updatedStaff[staffIndex],
      status: assignedOrders.length > 0 ? "busy" : "available",
      currentOrder:
        assignedOrders.length > 0
          ? assignedOrders[0] !== orderId
            ? updatedStaff[staffIndex].currentOrder
            : assignedOrders[0]
          : null,
      assignedOrders,
      currentLoad: Math.max(0, updatedStaff[staffIndex].currentLoad - 1),
    };

    setOrders(updatedOrders);
    setStaff(updatedStaff);

    // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
    addToActivityHistory({
      type: "unassign",
      orderId,
      orderName: orders[orderIndex].name,
      staffId,
      staffName: staff[staffIndex].name,
      timestamp: new Date().toISOString(),
      details: `H·ªßy ph√¢n c√¥ng ƒë∆°n ${orders[orderIndex].name} kh·ªèi ${staff[staffIndex].name}`,
    });
  };

  // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh
  const markOrderAsCompleted = (orderId) => {
    // T√¨m ƒë∆°n h√†ng c·∫ßn ƒë√°nh d·∫•u
    const orderIndex = orders.findIndex((o) => o.id === orderId);
    if (orderIndex === -1) return;

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    const updatedOrders = [...orders];
    updatedOrders[orderIndex] = {
      ...updatedOrders[orderIndex],
      status: "completed",
    };

    // N·∫øu ƒë∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng cho nh√¢n vi√™n, c·∫≠p nh·∫≠t nh√¢n vi√™n
    const assignedStaffId = updatedOrders[orderIndex].assignedTo;
    if (assignedStaffId) {
      const staffIndex = staff.findIndex((s) => s.id === assignedStaffId);
      if (staffIndex !== -1) {
        const updatedStaff = [...staff];
        const assignedOrders = updatedStaff[staffIndex].assignedOrders.filter(
          (id) => id !== orderId
        );

        updatedStaff[staffIndex] = {
          ...updatedStaff[staffIndex],
          status: assignedOrders.length > 0 ? "busy" : "available",
          currentOrder:
            assignedOrders.length > 0
              ? updatedStaff[staffIndex].currentOrder === orderId
                ? assignedOrders[0]
                : updatedStaff[staffIndex].currentOrder
              : null,
          assignedOrders,
          currentLoad: Math.max(0, updatedStaff[staffIndex].currentLoad - 1),
          orderCount: updatedStaff[staffIndex].orderCount + 1,
        };

        setStaff(updatedStaff);

        // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
        addToActivityHistory({
          type: "complete",
          orderId,
          orderName: orders[orderIndex].name,
          staffId: assignedStaffId,
          staffName: updatedStaff[staffIndex].name,
          timestamp: new Date().toISOString(),
          details: `Ho√†n th√†nh ƒë∆°n ${orders[orderIndex].name} b·ªüi ${updatedStaff[staffIndex].name}`,
        });
      }
    }

    setOrders(updatedOrders);

    // C·∫≠p nh·∫≠t metrics
    setMetrics((prev) => ({
      ...prev,
      pendingOrders: Math.max(0, prev.pendingOrders - 1),
      processingOrders: Math.max(0, prev.processingOrders - 1),
      completedOrders: prev.completedOrders + 1,
      p1Orders:
        updatedOrders[orderIndex].sla.code === "P1"
          ? Math.max(0, prev.p1Orders - 1)
          : prev.p1Orders,
    }));
  };

  // Ch·ª©c nƒÉng in ƒë∆°n h√†ng
  const printOrders = () => {
    if (selectedOrders.length === 0) return;

    const printUrl =
      printType === "order"
        ? `https://one.tga.com.vn/so/invoicePrint?id=${selectedOrders.join(",")}`
        : `https://one.tga.com.vn/so/prepare?id=${selectedOrders.join(",")}`;

    // M·ªü URL trong tab m·ªõi
    window.open(printUrl, "_blank");

    // C·∫≠p nh·∫≠t th·ªùi gian in/xem ƒë∆°n
    const currentTimestamp = new Date().toISOString();
    setOrders((prevOrders) =>
      prevOrders.map((order) => {
        if (selectedOrders.includes(order.id)) {
          return {
            ...order,
            [printType === "order" ? "printTimestamp" : "viewTimestamp"]:
              currentTimestamp,
          };
        }
        return order;
      })
    );

    // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
    addToActivityHistory({
      type: printType === "order" ? "print_order" : "print_picking",
      timestamp: currentTimestamp,
      details: `${printType === "order" ? "In ƒë∆°n h√†ng" : "Xem phi·∫øu so·∫°n h√†ng"} cho ${selectedOrders.length} ƒë∆°n: ${selectedOrders.join(", ")}`,
    });

    // ƒê√≥ng modal
    setShowPrintModal(false);
  };

  // L·ªçc ƒë∆°n h√†ng theo c√°c ti√™u ch√≠ ƒë√£ ch·ªçn
  const filteredOrders = orders
    .filter((order) => {
      // L·ªçc theo m·ª©c ƒë·ªô ∆∞u ti√™n SLA
      if (selectedPriority !== "all" && order.sla.code !== selectedPriority) {
        return false;
      }

      // L·ªçc theo khu v·ª±c
      if (selectedArea !== "all") {
        const orderArea = order.location.split("-")[0];
        if (orderArea !== selectedArea) {
          return false;
        }
      }

      // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
      if (searchTerm) {
        const normalizedSearch = searchTerm.toLowerCase();

        return (
          order.id.toLowerCase().includes(normalizedSearch) ||
          order.name.toLowerCase().includes(normalizedSearch) ||
          order.detail.toLowerCase().includes(normalizedSearch) ||
          order.customer.toLowerCase().includes(normalizedSearch) ||
          order.shipment_code.toLowerCase().includes(normalizedSearch) ||
          order.location.toLowerCase().includes(normalizedSearch)
        );
      }

      return true;
    })
    .sort((a, b) => {
      // S·∫Øp x·∫øp theo tr∆∞·ªùng ƒë∆∞·ª£c ch·ªçn v√† h∆∞·ªõng s·∫Øp x·∫øp
      if (orderSort.field === "priority") {
        const priorityA = a.priority || 0;
        const priorityB = b.priority || 0;

        return orderSort.direction === "asc"
          ? priorityA - priorityB
          : priorityB - priorityA;
      } else if (orderSort.field === "sla") {
        const slaValueA = getSLAValue(a.sla.code);
        const slaValueB = getSLAValue(b.sla.code);

        return orderSort.direction === "asc"
          ? slaValueA - slaValueB
          : slaValueB - slaValueA;
      } else if (orderSort.field === "time") {
        // S·∫Øp x·∫øp theo th·ªùi gian c√≤n l·∫°i
        const [hoursA, minsA, secsA] = a.timeLeft.split(":").map(Number);
        const [hoursB, minsB, secsB] = b.timeLeft.split(":").map(Number);

        const timeA = hoursA * 3600 + minsA * 60 + secsA;
        const timeB = hoursB * 3600 + minsB * 60 + secsB;

        return orderSort.direction === "asc" ? timeA - timeB : timeB - timeA;
      }

      // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo id
      return a.id - b.id;
    });

  // Tr·∫£ v·ªÅ gi√° tr·ªã s·ªë c·ªßa m√£ SLA ƒë·ªÉ s·∫Øp x·∫øp
  const getSLAValue = (slaCode) => {
    switch (slaCode) {
      case "P1":
        return 1;
      case "P2":
        return 2;
      case "P3":
        return 3;
      case "P4":
        return 4;
      default:
        return 5;
    }
  };

  // L·ªçc nh√¢n vi√™n theo tr·∫°ng th√°i
  const filteredStaff = staff.filter((s) => {
    if (staffFilter === "available" && s.status !== "available") {
      return false;
    }

    if (staffFilter === "busy" && s.status !== "busy") {
      return false;
    }

    return true;
  });

  // Toggle selected order
  const toggleOrderSelection = (orderId) => {
    if (selectedOrders.includes(orderId)) {
      setSelectedOrders(selectedOrders.filter((id) => id !== orderId));
    } else {
      setSelectedOrders([...selectedOrders, orderId]);
    }
  };

  // Select/deselect all orders
  const toggleSelectAll = () => {
    if (selectedOrders.length === filteredOrders.length) {
      setSelectedOrders([]);
    } else {
      setSelectedOrders(filteredOrders.map((order) => order.id));
    }
  };

  // Download l·ªãch s·ª≠ ho·∫°t ƒë·ªông
  const downloadActivityHistory = () => {
    if (activityHistory.length === 0) return;

    // Chu·∫©n b·ªã d·ªØ li·ªáu CSV
    const headers = [
      "Th·ªùi gian",
      "Lo·∫°i ho·∫°t ƒë·ªông",
      "M√£ ƒë∆°n",
      "T√™n ƒë∆°n",
      "M√£ NV",
      "T√™n NV",
      "Chi ti·∫øt",
    ];
    const rows = [headers.join(",")];

    activityHistory.forEach((activity) => {
      const row = [
        new Date(activity.timestamp).toLocaleString("vi-VN"),
        activity.type || "",
        activity.orderId || "",
        activity.orderName || "",
        activity.staffId || "",
        activity.staffName || "",
        `"${activity.details || ""}"`,
      ];

      rows.push(row.join(","));
    });

    // T·∫°o file blob
    const csvContent = rows.join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);

    // T·∫°o link t·∫£i xu·ªëng
    const link = document.createElement("a");
    link.href = url;
    link.setAttribute(
      "download",
      `activity_history_${new Date().toISOString().slice(0, 10)}.csv`
    );
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
    addToActivityHistory({
      type: "export_history",
      timestamp: new Date().toISOString(),
      details: `Xu·∫•t l·ªãch s·ª≠ ho·∫°t ƒë·ªông (${activityHistory.length} b·∫£n ghi)`,
    });
  };

  // Render t·ª´ng tab
  const renderDashboard = () => (
    <div className="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
      <div className="md:col-span-2 space-y-4">
        {/* Th·ªëng k√™ t·ªïng quan */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex justify-between items-start">
              <div>
                <div className="text-sm text-gray-500 mb-1">T·ªïng ƒë∆°n h√†ng</div>
                <div className="text-2xl font-bold">{metrics.totalOrders}</div>
              </div>
              <Package className="h-6 w-6 text-blue-500" />
            </div>
            <div className="mt-2 text-xs text-gray-500">
              {metrics.pendingOrders} ch·ªù x·ª≠ l√Ω | {metrics.processingOrders}{" "}
              ƒëang x·ª≠ l√Ω | {metrics.completedOrders} ho√†n th√†nh
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex justify-between items-start">
              <div>
                <div className="text-sm text-gray-500 mb-1">ƒê∆°n P1 (g·∫•p)</div>
                <div className="text-2xl font-bold text-red-600">
                  {metrics.p1Orders}
                </div>
              </div>
              <AlertTriangle className="h-6 w-6 text-red-500" />
            </div>
            <div className="mt-2 text-xs text-gray-500">
              {Math.floor(metrics.p1Orders / 2)} ƒëang x·ª≠ l√Ω |{" "}
              {Math.ceil(metrics.p1Orders / 2)} ch·ªù x·ª≠ l√Ω
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex justify-between items-start">
              <div>
                <div className="text-sm text-gray-500 mb-1">
                  Th·ªùi gian l·∫•y TB
                </div>
                <div className="text-2xl font-bold">
                  {metrics.avgPickingTime} ph√∫t
                </div>
              </div>
              <Clock className="h-6 w-6 text-yellow-500" />
            </div>
            <div className="mt-2 text-xs text-gray-500">
              {metrics.slaCompliance}% ƒë·∫°t SLA
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex justify-between items-start">
              <div>
                <div className="text-sm text-gray-500 mb-1">T·∫£i nh√¢n s·ª±</div>
                <div className="text-2xl font-bold">
                  {metrics.staffUtilization}%
                </div>
              </div>
              <User className="h-6 w-6 text-green-500" />
            </div>
            <div className="mt-2 w-full bg-gray-200 rounded-full h-1.5">
              <div
                className={`h-1.5 rounded-full ${
                  metrics.staffUtilization > 90
                    ? "bg-red-500"
                    : metrics.staffUtilization > 75
                      ? "bg-yellow-500"
                      : "bg-green-500"
                }`}
                style={{ width: `${metrics.staffUtilization}%` }}
              ></div>
            </div>
          </div>
        </div>

        {/* ƒê∆°n ∆∞u ti√™n cao */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium">ƒê∆°n ∆∞u ti√™n cao c·∫ßn x·ª≠ l√Ω</h3>
            <button
              className="px-2 py-1 bg-blue-600 text-white text-xs rounded flex items-center"
              onClick={autoAssignOrders}
              disabled={isAutoAssigning}
            >
              {isAutoAssigning ? (
                <>
                  <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                  <span>ƒêang ph√¢n b·ªï...</span>
                </>
              ) : (
                <>
                  <Zap className="h-3 w-3 mr-1" />
                  <span>Ph√¢n b·ªï t·ª± ƒë·ªông</span>
                </>
              )}
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    M√£ ƒë∆°n
                  </th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    SLA
                  </th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Th·ªùi gian c√≤n
                  </th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Lo·∫°i SP
                  </th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    V·ªã tr√≠ kho
                  </th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Thao t√°c
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {orders
                  .filter(
                    (order) =>
                      (order.sla.code === "P1" || order.sla.code === "P2") &&
                      order.status !== "completed"
                  )
                  .slice(0, 5)
                  .map((order) => (
                    <tr
                      key={order.id}
                      className={order.sla.code === "P1" ? "bg-red-50" : ""}
                    >
                      <td className="px-3 py-2 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {order.name}
                        </div>
                        <div className="text-xs text-gray-500">
                          {order.customer}
                        </div>
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap">
                        <span
                          className={`px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full ${order.sla.color}`}
                        >
                          {order.sla.code}
                        </span>
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap">
                        <div
                          className={`text-sm font-medium ${order.sla.code === "P1" ? "text-red-600" : "text-yellow-600"}`}
                        >
                          {order.timeLeft}
                        </div>
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">
                        {order.productType}
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap">
                        <span className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                          {order.location}
                        </span>
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap text-sm">
                        {order.assignedTo ? (
                          <div className="flex items-center text-green-600">
                            <Check className="h-4 w-4 mr-1" />
                            <span>
                              {staff.find((s) => s.id === order.assignedTo)
                                ?.name || `NV${order.assignedTo}`}
                            </span>
                          </div>
                        ) : (
                          <select
                            className="text-xs border border-gray-200 rounded py-1 px-2"
                            onChange={(e) =>
                              assignOrderToStaff(
                                order.id,
                                parseInt(e.target.value)
                              )
                            }
                            defaultValue=""
                          >
                            <option value="" disabled>
                              Ch·ªçn nh√¢n vi√™n
                            </option>
                            {staff
                              .filter((s) => s.currentLoad < s.maxCapacity)
                              .map((s) => (
                                <option key={s.id} value={s.id}>
                                  {s.name} ({s.currentLoad}/{s.maxCapacity})
                                </option>
                              ))}
                          </select>
                        )}
                      </td>
                    </tr>
                  ))}
                {orders.filter(
                  (order) =>
                    (order.sla.code === "P1" || order.sla.code === "P2") &&
                    order.status !== "completed"
                ).length === 0 && (
                  <tr>
                    <td
                      colSpan="6"
                      className="px-3 py-4 text-center text-gray-500"
                    >
                      Kh√¥ng c√≥ ƒë∆°n ∆∞u ti√™n cao c·∫ßn x·ª≠ l√Ω
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <div className="mt-2 text-right">
            <button
              onClick={() => setTab("orders")}
              className="text-blue-600 text-sm"
            >
              Xem t·∫•t c·∫£ ƒë∆°n
            </button>
          </div>
        </div>

        {/* ƒê∆°n ƒëang x·ª≠ l√Ω */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium">ƒê∆°n ƒëang x·ª≠ l√Ω</h3>
            <span className="text-xs text-gray-500">
              {orders.filter((order) => order.status === "processing").length}{" "}
              ƒë∆°n
            </span>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
            {orders
              .filter((order) => order.status === "processing")
              .slice(0, 6)
              .map((order) => {
                const assignedStaffMember = staff.find(
                  (s) => s.id === order.assignedTo
                );

                return (
                  <div
                    key={order.id}
                    className={`border rounded-lg p-3 ${
                      order.sla.code === "P1"
                        ? "bg-red-50 border-red-200"
                        : order.sla.code === "P2"
                          ? "bg-yellow-50 border-yellow-200"
                          : "bg-blue-50 border-blue-200"
                    }`}
                  >
                    <div className="flex justify-between items-start mb-2">
                      <div className="font-medium text-sm">{order.name}</div>
                      <span
                        className={`px-2 py-0.5 rounded-full text-xs ${order.sla.color}`}
                      >
                        {order.sla.code}
                      </span>
                    </div>

                    <div className="text-xs text-gray-600 mb-2 line-clamp-1">
                      {order.detail}
                    </div>

                    <div className="text-xs text-gray-600 mb-2">
                      <MapPin className="h-3 w-3 inline mr-1" />
                      {order.location}
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center">
                        <User className="h-3 w-3 text-blue-500 mr-1" />
                        <span className="text-xs font-medium">
                          {assignedStaffMember?.name || "Ch∆∞a ph√¢n c√¥ng"}
                        </span>
                      </div>

                      <button
                        className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded"
                        onClick={() => markOrderAsCompleted(order.id)}
                      >
                        Ho√†n th√†nh
                      </button>
                    </div>
                  </div>
                );
              })}

            {orders.filter((order) => order.status === "processing").length ===
              0 && (
              <div className="col-span-full text-center text-gray-500 py-4">
                Kh√¥ng c√≥ ƒë∆°n ƒëang x·ª≠ l√Ω
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="space-y-4">
        {/* Nh√¢n vi√™n ƒëang l√†m vi·ªác */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium">Nh√¢n vi√™n ƒëang l√†m vi·ªác</h3>
            <button
              className="text-xs text-blue-600"
              onClick={() => setShowStaffPanel(!showStaffPanel)}
            >
              {showStaffPanel ? "·∫®n b·∫£ng" : "Xem t·∫•t c·∫£"}
            </button>
          </div>

          <div className="space-y-3">
            {staff
              .filter((s) => s.status === "busy")
              .map((s) => (
                <div
                  key={s.id}
                  className="flex items-center justify-between bg-yellow-50 p-2 rounded-lg border border-yellow-100"
                >
                  <div>
                    <div className="font-medium text-sm">{s.name}</div>
                    <div className="text-xs text-gray-500">
                      {s.role} ‚Ä¢ Khu {s.area}
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-xs font-medium">
                      {s.currentLoad}/{s.maxCapacity} ƒë∆°n
                    </div>
                    <div className="text-xs text-gray-500">
                      Hi·ªáu su·∫•t: {s.efficiency}%
                    </div>
                  </div>
                </div>
              ))}

            {staff.filter((s) => s.status === "busy").length === 0 && (
              <div className="text-center text-gray-500 py-2">
                Kh√¥ng c√≥ nh√¢n vi√™n ƒëang l√†m vi·ªác
              </div>
            )}
          </div>
        </div>

        {/* Th·ªëng k√™ SLA */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium">Th·ªëng k√™ theo SLA</h3>
            <span className="text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded">
              {metrics.slaCompliance}% ƒë·∫°t SLA
            </span>
          </div>

          <div className="space-y-3">
            <div>
              <div className="flex justify-between text-xs mb-1">
                <span>P1 - G·∫•p</span>
                <span>{metrics.p1Orders} ƒë∆°n</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-1.5">
                <div
                  className="bg-red-500 h-1.5 rounded-full"
                  style={{
                    width: `${(metrics.p1Orders / metrics.totalOrders) * 100}%`,
                  }}
                ></div>
              </div>
            </div>

            <div>
              <div className="flex justify-between text-xs mb-1">
                <span>P2 - C·∫£nh b√°o</span>
                <span>{metrics.p2Orders} ƒë∆°n</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-1.5">
                <div
                  className="bg-yellow-500 h-1.5 rounded-full"
                  style={{
                    width: `${(metrics.p2Orders / metrics.totalOrders) * 100}%`,
                  }}
                ></div>
              </div>
            </div>

            <div>
              <div className="flex justify-between text-xs mb-1">
                <span>P3/P4 - Th∆∞·ªùng</span>
                <span>
                  {metrics.totalOrders - metrics.p1Orders - metrics.p2Orders}{" "}
                  ƒë∆°n
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-1.5">
                <div
                  className="bg-green-500 h-1.5 rounded-full"
                  style={{
                    width: `${((metrics.totalOrders - metrics.p1Orders - metrics.p2Orders) / metrics.totalOrders) * 100}%`,
                  }}
                ></div>
              </div>
            </div>
          </div>

          <div className="mt-4 pt-3 border-t border-gray-100">
            <div className="text-xs font-medium mb-2">Hi·ªáu su·∫•t kho v·∫≠n</div>
            <div className="flex items-center justify-between">
              <div className="text-2xl font-bold text-blue-600">
                {Math.round(
                  (metrics.completedOrders / metrics.totalOrders) * 100
                )}
                %
              </div>
              <div className="text-xs text-gray-500">
                {metrics.completedOrders}/{metrics.totalOrders} ƒë∆°n ho√†n th√†nh
              </div>
            </div>
          </div>
        </div>

        {/* L·ªãch s·ª≠ ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h3>
            <button
              className="text-xs text-blue-600"
              onClick={() => setShowActivityHistory(!showActivityHistory)}
            >
              {showActivityHistory ? "·∫®n l·ªãch s·ª≠" : "Xem t·∫•t c·∫£"}
            </button>
          </div>

          <div className="space-y-2 max-h-52 overflow-y-auto">
            {activityHistory.slice(0, 5).map((activity, index) => (
              <div
                key={index}
                className="text-xs border-l-2 border-blue-500 pl-2 py-1"
              >
                <div className="flex justify-between">
                  <span className="font-medium">
                    {activity.type === "auto_assign" && "T·ª± ƒë·ªông ph√¢n b·ªï"}
                    {activity.type === "manual_assign" && "Ph√¢n b·ªï th·ªß c√¥ng"}
                    {activity.type === "complete" && "Ho√†n th√†nh ƒë∆°n"}
                    {activity.type === "upload" && "T·∫£i l√™n ƒë∆°n h√†ng"}
                    {activity.type === "system" && "H·ªá th·ªëng"}
                    {activity.type === "print_order" && "In ƒë∆°n h√†ng"}
                    {activity.type === "print_picking" && "So·∫°n h√†ng"}
                    {activity.type === "unassign" && "H·ªßy ph√¢n c√¥ng"}
                    {activity.type === "sla_escalation" && "N√¢ng c·∫•p SLA"}
                  </span>
                  <span className="text-gray-500">
                    {new Date(activity.timestamp).toLocaleTimeString()}
                  </span>
                </div>
                <div className="mt-1">{activity.details}</div>
              </div>
            ))}

            {activityHistory.length === 0 && (
              <div className="text-center text-gray-500 py-2">
                Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderOrders = () => (
    <div className="mb-4">
      <div className="flex justify-between items-center mb-3">
        <h3 className="font-medium">Danh s√°ch ƒë∆°n h√†ng</h3>

        <div className="flex space-x-2">
          <div className="relative">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm ƒë∆°n h√†ng..."
              className="pl-8 pr-3 py-1.5 text-sm border rounded"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <Search className="h-4 w-4 text-gray-400 absolute left-2.5 top-1/2 transform -translate-y-1/2" />
          </div>

          <select
            className="px-3 py-1.5 text-sm border rounded"
            value={selectedPriority}
            onChange={(e) => setSelectedPriority(e.target.value)}
          >
            <option value="all">T·∫•t c·∫£ SLA</option>
            <option value="P1">P1 - G·∫•p</option>
            <option value="P2">P2 - C·∫£nh b√°o</option>
            <option value="P3">P3 - B√¨nh th∆∞·ªùng</option>
            <option value="P4">P4 - Ch·ªù x·ª≠ l√Ω</option>
          </select>

          <select
            className="px-3 py-1.5 text-sm border rounded"
            value={selectedArea}
            onChange={(e) => setSelectedArea(e.target.value)}
          >
            <option value="all">T·∫•t c·∫£ khu v·ª±c</option>
            <option value="HN">H√† N·ªôi</option>
            <option value="290">Kho 290</option>
            <option value="300">Kho 300</option>
          </select>
        </div>
      </div>

      <div className="flex items-center mb-2">
        <div className="flex items-center">
          <input
            type="checkbox"
            className="mr-1"
            checked={
              selectedOrders.length === filteredOrders.length &&
              filteredOrders.length > 0
            }
            onChange={toggleSelectAll}
          />
          <span className="text-sm">Ch·ªçn t·∫•t c·∫£</span>
        </div>

        <div className="ml-4 text-sm">
          ƒê√£ ch·ªçn{" "}
          <span className="font-medium text-blue-600">
            {selectedOrders.length}
          </span>{" "}
          / {filteredOrders.length} ƒë∆°n
        </div>

        {selectedOrders.length > 0 && (
          <div className="ml-auto space-x-2">
            <button
              className="px-3 py-1.5 bg-blue-100 text-blue-700 text-sm rounded flex items-center"
              onClick={() => {
                setPrintType("order");
                setShowPrintModal(true);
              }}
            >
              <Printer className="h-4 w-4 mr-1" />
              <span>In ƒë∆°n</span>
            </button>

            <button
              className="px-3 py-1.5 bg-green-100 text-green-700 text-sm rounded flex items-center"
              onClick={() => {
                setPrintType("picking");
                setShowPrintModal(true);
              }}
            >
              <FileText className="h-4 w-4 mr-1" />
              <span>So·∫°n h√†ng</span>
            </button>
          </div>
        )}
      </div>

      <div className="bg-white rounded-lg overflow-hidden shadow-sm">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="w-10 px-3 py-3">
                  <span className="sr-only">Ch·ªçn</span>
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  M√£ ƒë∆°n / K√™nh
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <div
                    className="flex items-center cursor-pointer"
                    onClick={() =>
                      setOrderSort({
                        field: "sla",
                        direction:
                          orderSort.field === "sla" &&
                          orderSort.direction === "asc"
                            ? "desc"
                            : "asc",
                      })
                    }
                  >
                    <span>SLA</span>
                    {orderSort.field === "sla" &&
                      (orderSort.direction === "asc" ? (
                        <ChevronUp className="h-4 w-4 ml-1" />
                      ) : (
                        <ChevronDown className="h-4 w-4 ml-1" />
                      ))}
                  </div>
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <div
                    className="flex items-center cursor-pointer"
                    onClick={() =>
                      setOrderSort({
                        field: "time",
                        direction:
                          orderSort.field === "time" &&
                          orderSort.direction === "asc"
                            ? "desc"
                            : "asc",
                      })
                    }
                  >
                    <span>Th·ªùi gian c√≤n</span>
                    {orderSort.field === "time" &&
                      (orderSort.direction === "asc" ? (
                        <ChevronUp className="h-4 w-4 ml-1" />
                      ) : (
                        <ChevronDown className="h-4 w-4 ml-1" />
                      ))}
                  </div>
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  S·∫£n ph·∫©m
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  V·ªã tr√≠ kho
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <div
                    className="flex items-center cursor-pointer"
                    onClick={() =>
                      setOrderSort({
                        field: "priority",
                        direction:
                          orderSort.field === "priority" &&
                          orderSort.direction === "asc"
                            ? "desc"
                            : "asc",
                      })
                    }
                  >
                    <span>∆Øu ti√™n</span>
                    {orderSort.field === "priority" &&
                      (orderSort.direction === "asc" ? (
                        <ChevronUp className="h-4 w-4 ml-1" />
                      ) : (
                        <ChevronDown className="h-4 w-4 ml-1" />
                      ))}
                  </div>
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tr·∫°ng th√°i
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nh√¢n vi√™n
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredOrders.map((order) => (
                <tr
                  key={order.id}
                  className={
                    order.status === "completed"
                      ? "bg-gray-50 text-gray-500"
                      : order.sla.code === "P1"
                        ? "bg-red-50"
                        : order.sla.code === "P2"
                          ? "bg-yellow-50"
                          : ""
                  }
                >
                  <td className="px-3 py-3">
                    <input
                      type="checkbox"
                      checked={selectedOrders.includes(order.id)}
                      onChange={() => toggleOrderSelection(order.id)}
                      disabled={order.status === "completed"}
                      className="rounded"
                    />
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <div className="text-sm font-medium">{order.name}</div>
                    <div className="text-xs text-gray-500">
                      {order.customer}
                    </div>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <span
                      className={`px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full ${order.sla.color}`}
                    >
                      {order.sla.code}
                    </span>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <div
                      className={`text-sm font-medium ${
                        order.status === "completed"
                          ? "text-gray-500"
                          : order.sla.code === "P1"
                            ? "text-red-600"
                            : order.sla.code === "P2"
                              ? "text-yellow-600"
                              : "text-gray-600"
                      }`}
                    >
                      {order.timeLeft}
                    </div>
                  </td>
                  <td className="px-3 py-3">
                    <div className="text-sm line-clamp-1 max-w-xs">
                      {order.detail}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {order.productType} ‚Ä¢ {order.complexity}
                    </div>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <span className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                      {order.location}
                    </span>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <div className="w-full bg-gray-200 rounded-full h-1.5">
                      <div
                        className={`h-1.5 rounded-full ${
                          order.priority > 90
                            ? "bg-red-500"
                            : order.priority > 80
                              ? "bg-yellow-500"
                              : order.priority > 70
                                ? "bg-orange-500"
                                : order.priority > 50
                                  ? "bg-blue-500"
                                  : "bg-green-500"
                        }`}
                        style={{ width: `${order.priority}%` }}
                      ></div>
                    </div>
                    <div className="text-xs text-right mt-1">
                      {order.priority}%
                    </div>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <span
                      className={`px-2 py-0.5 rounded-full text-xs ${
                        order.status === "completed"
                          ? "bg-green-100 text-green-800"
                          : order.status === "processing"
                            ? "bg-yellow-100 text-yellow-800"
                            : "bg-blue-100 text-blue-800"
                      }`}
                    >
                      {order.status === "completed"
                        ? "Ho√†n th√†nh"
                        : order.status === "processing"
                          ? "ƒêang x·ª≠ l√Ω"
                          : "Ch·ªù x·ª≠ l√Ω"}
                    </span>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    {order.assignedTo ? (
                      <div className="flex items-center">
                        {order.status !== "completed" ? (
                          <>
                            <div className="text-sm">
                              {
                                staff.find((s) => s.id === order.assignedTo)
                                  ?.name
                              }
                            </div>
                            <button
                              className="ml-2 p-1 bg-red-100 text-red-600 rounded hover:bg-red-200"
                              onClick={() =>
                                unassignOrder(order.id, order.assignedTo)
                              }
                              title="H·ªßy ph√¢n c√¥ng"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </>
                        ) : (
                          <div className="text-sm">
                            {staff.find((s) => s.id === order.assignedTo)?.name}
                          </div>
                        )}
                      </div>
                    ) : order.status !== "completed" ? (
                      <select
                        className="text-xs border border-gray-200 rounded py-1 px-2"
                        onChange={(e) =>
                          assignOrderToStaff(order.id, parseInt(e.target.value))
                        }
                        defaultValue=""
                      >
                        <option value="" disabled>
                          Ch·ªçn nh√¢n vi√™n
                        </option>
                        {staff
                          .filter((s) => s.currentLoad < s.maxCapacity)
                          .map((s) => (
                            <option key={s.id} value={s.id}>
                              {s.name} ({s.currentLoad}/{s.maxCapacity})
                            </option>
                          ))}
                      </select>
                    ) : (
                      <span className="text-sm text-gray-500">-</span>
                    )}
                  </td>
                </tr>
              ))}

              {filteredOrders.length === 0 && (
                <tr>
                  <td
                    colSpan="9"
                    className="px-3 py-4 text-center text-gray-500"
                  >
                    Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªçc
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderStaff = () => {
    // Log th·ªùi ƒëi·ªÉm xem ƒë∆°n h√†ng
    const logOrderViewed = (orderId, staffId, viewType) => {
      const order = orders.find((o) => o.id === orderId);
      const staffMember = staff.find((s) => s.id === staffId);

      if (!order || !staffMember) return;

      // Th√™m v√†o l·ªãch s·ª≠ ho·∫°t ƒë·ªông
      addToActivityHistory({
        type: viewType === "print" ? "view_print" : "view_picking",
        orderId,
        orderName: order.name,
        staffId: staffMember.id,
        staffName: staffMember.name,
        timestamp: new Date().toISOString(),
        details: `${staffMember.name} ${viewType === "print" ? "in ƒë∆°n h√†ng" : "xem so·∫°n h√†ng"} ${order.name || orderId}`,
      });
    };

    // In ho·∫∑c so·∫°n h√†ng ƒë∆°n l·∫ª
    const printSingleOrder = (orderId, type) => {
      const staffMember = staff.find((s) => s.assignedOrders.includes(orderId));

      if (!staffMember) return;

      // Ghi log th·ªùi ƒëi·ªÉm xem/in ƒë∆°n
      logOrderViewed(orderId, staffMember.id, type);

      // M·ªü URL trong tab m·ªõi
      const url =
        type === "print"
          ? `https://one.tga.com.vn/so/invoicePrint?id=${orderId}`
          : `https://one.tga.com.vn/so/prepare?id=${orderId}`;

      window.open(url, "_blank");
    };

    // In ho·∫∑c so·∫°n h√†ng t·∫•t c·∫£ ƒë∆°n c·ªßa nh√¢n vi√™n
    const printAllStaffOrders = (staffId, type) => {
      const staffMember = staff.find((s) => s.id === staffId);

      if (!staffMember || staffMember.assignedOrders.length === 0) return;

      // Ghi log cho t·∫•t c·∫£ ƒë∆°n
      staffMember.assignedOrders.forEach((orderId) => {
        logOrderViewed(orderId, staffId, type);
      });

      // M·ªü URL trong tab m·ªõi
      const url =
        type === "print"
          ? `https://one.tga.com.vn/so/invoicePrint?id=${staffMember.assignedOrders.join(",")}`
          : `https://one.tga.com.vn/so/prepare?id=${staffMember.assignedOrders.join(",")}`;

      window.open(url, "_blank");
    };

    return (
      <div className="mb-4">
        <div className="flex justify-between items-center mb-3">
          <h3 className="font-medium">Qu·∫£n l√Ω nh√¢n s·ª±</h3>

          <div className="flex space-x-2">
            <select
              className="px-3 py-1.5 text-sm border rounded"
              value={staffFilter}
              onChange={(e) => setStaffFilter(e.target.value)}
            >
              <option value="all">T·∫•t c·∫£ nh√¢n vi√™n</option>
              <option value="available">S·∫µn s√†ng</option>
              <option value="busy">ƒêang l√†m vi·ªác</option>
            </select>

            <button
              className="px-3 py-1.5 bg-blue-100 text-blue-700 text-sm rounded flex items-center"
              onClick={autoAssignOrders}
              disabled={isAutoAssigning}
            >
              {isAutoAssigning ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                  <span>ƒêang ph√¢n b·ªï...</span>
                </>
              ) : (
                <>
                  <Zap className="h-4 w-4 mr-1" />
                  <span>Ph√¢n b·ªï t·ª± ƒë·ªông</span>
                </>
              )}
            </button>
          </div>
        </div>

        <div className="bg-white rounded-lg overflow-hidden shadow-sm mb-4">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Nh√¢n vi√™n
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Khu v·ª±c
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    K·ªπ nƒÉng
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Tr·∫°ng th√°i
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ƒê∆°n ƒëang x·ª≠ l√Ω
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Hi·ªáu su·∫•t
                  </th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Thao t√°c
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredStaff.map((person) => (
                  <tr
                    key={person.id}
                    className={person.status === "busy" ? "bg-yellow-50" : ""}
                  >
                    <td className="px-3 py-3 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="font-medium text-gray-900">
                          {person.name}
                        </div>
                        <div className="text-xs text-gray-500 ml-1">
                          ({person.role})
                        </div>
                      </div>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <span className="px-2 py-0.5 bg-blue-100 text-blue-700 rounded text-xs">
                        Khu {person.area}
                      </span>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <div className="flex flex-wrap gap-1">
                        {person.skills.map((skill, index) => (
                          <span
                            key={index}
                            className="px-1.5 py-0.5 bg-gray-100 text-gray-700 rounded text-xs"
                          >
                            {skill}
                          </span>
                        ))}
                      </div>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <span
                        className={`px-2 py-0.5 rounded-full text-xs ${
                          person.status === "busy"
                            ? "bg-yellow-100 text-yellow-800"
                            : "bg-green-100 text-green-800"
                        }`}
                      >
                        {person.status === "busy"
                          ? "ƒêang l√†m vi·ªác"
                          : "S·∫µn s√†ng"}
                      </span>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <div className="text-sm">
                        {person.currentLoad}/{person.maxCapacity} ƒë∆°n
                      </div>
                      {person.currentOrder && (
                        <div className="text-xs text-gray-500 mt-1">
                          ƒêang x·ª≠ l√Ω:{" "}
                          {orders.find((o) => o.id === person.currentOrder)
                            ?.name || person.currentOrder}
                        </div>
                      )}
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="text-sm font-medium mr-2">
                          {person.efficiency}%
                        </div>
                        <div className="w-16 bg-gray-200 rounded-full h-1.5">
                          <div
                            className={`h-1.5 rounded-full ${
                              person.efficiency >= 95
                                ? "bg-green-500"
                                : person.efficiency >= 90
                                  ? "bg-blue-500"
                                  : person.efficiency >= 85
                                    ? "bg-yellow-500"
                                    : "bg-red-500"
                            }`}
                            style={{ width: `${person.efficiency}%` }}
                          ></div>
                        </div>
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        {person.orderCount} ƒë∆°n ƒë√£ x·ª≠ l√Ω
                      </div>
                    </td>
                    <td className="px-3 py-3 whitespace-nowrap">
                      <div className="flex items-center space-x-1">
                        <button
                          className="p-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
                          title="Xem chi ti·∫øt"
                        >
                          <Edit className="h-4 w-4" />
                        </button>

                        {person.assignedOrders.length > 0 && (
                          <>
                            <button
                              className="p-1 bg-green-100 text-green-700 rounded hover:bg-green-200"
                              title="In t·∫•t c·∫£ ƒë∆°n"
                              onClick={() =>
                                printAllStaffOrders(person.id, "print")
                              }
                            >
                              <Printer className="h-4 w-4" />
                            </button>
                            <button
                              className="p-1 bg-purple-100 text-purple-700 rounded hover:bg-purple-200"
                              title="So·∫°n t·∫•t c·∫£ ƒë∆°n"
                              onClick={() =>
                                printAllStaffOrders(person.id, "picking")
                              }
                            >
                              <FileText className="h-4 w-4" />
                            </button>
                          </>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}

                {filteredStaff.length === 0 && (
                  <tr>
                    <td
                      colSpan="7"
                      className="px-3 py-4 text-center text-gray-500"
                    >
                      Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªçc
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* ƒê∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng cho t·ª´ng nh√¢n vi√™n - Giao di·ªán nh√≥m ƒë∆°n theo nh√¢n vi√™n */}
        <h3 className="font-medium mb-3">
          ƒê∆°n h√†ng ƒë√£ ph√¢n c√¥ng theo nh√¢n vi√™n
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {staff
            .filter((s) => s.assignedOrders.length > 0)
            .map((person) => (
              <div
                key={person.id}
                className="bg-white rounded-lg p-4 shadow-sm"
              >
                <div className="flex justify-between items-center mb-3">
                  <h4 className="font-medium flex items-center">
                    <User className="h-4 w-4 mr-1 text-blue-600" />
                    {person.name}
                  </h4>
                  <span
                    className={`px-2 py-0.5 text-xs rounded-full ${
                      person.status === "busy"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-green-100 text-green-800"
                    }`}
                  >
                    {person.status === "busy" ? "ƒêang l√†m vi·ªác" : "S·∫µn s√†ng"}
                  </span>
                </div>

                <div className="mb-3 text-xs text-gray-500">
                  {person.role} ‚Ä¢ Khu {person.area} ‚Ä¢ Hi·ªáu su·∫•t:{" "}
                  {person.efficiency}%
                </div>

                <div className="flex justify-between items-center mb-3">
                  <div className="text-sm">
                    <span className="font-medium">{person.currentLoad}</span>/
                    {person.maxCapacity} ƒë∆°n
                  </div>

                  <div className="flex space-x-1">
                    <button
                      className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded flex items-center"
                      onClick={() => printAllStaffOrders(person.id, "print")}
                      disabled={person.assignedOrders.length === 0}
                    >
                      <Printer className="h-3 w-3 mr-1" />
                      In t·∫•t c·∫£
                    </button>
                    <button
                      className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded flex items-center"
                      onClick={() => printAllStaffOrders(person.id, "picking")}
                      disabled={person.assignedOrders.length === 0}
                    >
                      <FileText className="h-3 w-3 mr-1" />
                      So·∫°n t·∫•t c·∫£
                    </button>
                  </div>
                </div>

                <div className="space-y-3">
                  {person.assignedOrders.map((orderId, index) => {
                    const order = orders.find((o) => o.id === orderId);
                    if (!order) return null;

                    return (
                      <div
                        key={orderId}
                        className={`p-3 rounded-lg border ${
                          order.sla.code === "P1"
                            ? "bg-red-50 border-red-200"
                            : order.sla.code === "P2"
                              ? "bg-yellow-50 border-yellow-200"
                              : order.sla.code === "P3"
                                ? "bg-green-50 border-green-200"
                                : "bg-blue-50 border-blue-200"
                        } ${index === 0 ? "border-l-4" : ""}`}
                      >
                        <div className="flex justify-between items-start">
                          <div className="font-medium text-sm">
                            {order.name}
                            {index === 0 && (
                              <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-1.5 py-0.5 rounded">
                                ƒêang x·ª≠ l√Ω
                              </span>
                            )}
                          </div>
                          <span
                            className={`px-1.5 py-0.5 text-xs rounded-full ${order.sla.color}`}
                          >
                            {order.sla.code}
                          </span>
                        </div>

                        <div className="text-xs text-gray-600 mt-2 line-clamp-2">
                          {order.detail}
                        </div>

                        <div className="flex flex-wrap gap-2 mt-2">
                          <div className="text-xs text-gray-600">
                            <MapPin className="h-3 w-3 inline mr-1" />
                            {order.location}
                          </div>

                          <div className="text-xs font-medium">
                            <Clock className="h-3 w-3 inline mr-1" />
                            {order.timeLeft}
                          </div>
                        </div>

                        <div className="flex justify-between items-center mt-3 pt-2 border-t border-gray-100">
                          <div className="flex space-x-1">
                            <button
                              className="px-2 py-0.5 bg-blue-100 text-blue-700 text-xs rounded flex items-center"
                              onClick={() =>
                                printSingleOrder(order.id, "print")
                              }
                              title="In ƒë∆°n h√†ng"
                            >
                              <Printer className="h-3 w-3 mr-1" />
                              In ƒë∆°n
                            </button>

                            <button
                              className="px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded flex items-center"
                              onClick={() =>
                                printSingleOrder(order.id, "picking")
                              }
                              title="Phi·∫øu so·∫°n h√†ng"
                            >
                              <FileText className="h-3 w-3 mr-1" />
                              So·∫°n h√†ng
                            </button>
                          </div>

                          {index === 0 && (
                            <button
                              className="px-2 py-0.5 bg-purple-100 text-purple-700 text-xs rounded flex items-center"
                              onClick={() => markOrderAsCompleted(order.id)}
                            >
                              <Check className="h-3 w-3 mr-1" />
                              Ho√†n th√†nh
                            </button>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>

                {person.assignedOrders.length === 0 && (
                  <div className="p-4 text-center text-gray-500 bg-gray-50 rounded-lg">
                    Kh√¥ng c√≥ ƒë∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng
                  </div>
                )}
              </div>
            ))}

          {staff.filter((s) => s.assignedOrders.length > 0).length === 0 && (
            <div className="col-span-full text-center text-gray-500 py-4 bg-white rounded-lg shadow-sm">
              Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒë∆∞·ª£c ph√¢n c√¥ng ƒë∆°n h√†ng
            </div>
          )}
        </div>

        {/* Xem theo g√≥c nh√¨n c·ªßa nh√¢n vi√™n */}
        <div className="mt-6">
          <h3 className="font-medium mb-3 flex items-center">
            <Eye className="h-4 w-4 mr-1 text-blue-600" />
            Giao di·ªán nh√¢n vi√™n (xem th·ª≠)
          </h3>

          <div className="bg-gray-50 p-5 rounded-lg border border-gray-200">
            {/* Gi·∫£ l·∫≠p giao di·ªán cho nh√¢n vi√™n */}
            {(() => {
              // Gi·∫£ ƒë·ªãnh ƒëang xem v·ªõi nh√¢n vi√™n ƒë·∫ßu ti√™n c√≥ ƒë∆°n ƒë∆∞·ª£c ph√¢n c√¥ng
              const selectedStaff = staff.find(
                (s) => s.assignedOrders.length > 0
              );

              if (!selectedStaff) {
                return (
                  <div className="text-center py-8 text-gray-500">
                    Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c ph√¢n c√¥ng cho nh√¢n vi√™n
                  </div>
                );
              }

              return (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <div>
                      <h3 className="text-lg font-semibold">
                        {selectedStaff.name}
                      </h3>
                      <p className="text-sm text-gray-600">
                        {selectedStaff.role} ‚Ä¢ Khu v·ª±c: {selectedStaff.area}
                      </p>
                    </div>

                    <div className="flex space-x-2">
                      <button
                        className="px-3 py-1.5 bg-blue-600 text-white text-sm rounded flex items-center"
                        onClick={() =>
                          printAllStaffOrders(selectedStaff.id, "print")
                        }
                      >
                        <Printer className="h-4 w-4 mr-1" />
                        In t·∫•t c·∫£ ƒë∆°n
                      </button>
                      <button
                        className="px-3 py-1.5 bg-green-600 text-white text-sm rounded flex items-center"
                        onClick={() =>
                          printAllStaffOrders(selectedStaff.id, "picking")
                        }
                      >
                        <FileText className="h-4 w-4 mr-1" />
                        Xem phi·∫øu so·∫°n h√†ng
                      </button>
                    </div>
                  </div>

                  <div className="bg-white p-4 rounded-lg shadow">
                    <h4 className="font-medium mb-3 text-blue-800">
                      ƒê∆°n ƒëang ƒë∆∞·ª£c giao cho b·∫°n
                    </h4>

                    <div className="space-y-4">
                      {selectedStaff.assignedOrders.map((orderId, index) => {
                        const order = orders.find((o) => o.id === orderId);
                        if (!order) return null;

                        return (
                          <div
                            key={orderId}
                            className={`p-4 rounded-lg border ${
                              order.sla.code === "P1"
                                ? "bg-red-50 border-red-200"
                                : order.sla.code === "P2"
                                  ? "bg-yellow-50 border-yellow-200"
                                  : order.sla.code === "P3"
                                    ? "bg-green-50 border-green-200"
                                    : "bg-blue-50 border-blue-200"
                            } ${index === 0 ? "border-l-4" : ""}`}
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <h5 className="font-semibold text-gray-800">
                                  {order.name}
                                </h5>
                                <p className="text-sm text-gray-600 mt-1">
                                  {order.customer} ‚Ä¢ {order.transporter}
                                </p>
                              </div>

                              <div className="flex flex-col items-end">
                                <span
                                  className={`px-2 py-1 text-sm font-medium rounded ${order.sla.color}`}
                                >
                                  {order.sla.code} ‚Ä¢ {order.timeLeft} c√≤n l·∫°i
                                </span>
                                {index === 0 && (
                                  <span className="mt-1 bg-blue-100 text-blue-800 px-2 py-0.5 rounded text-xs">
                                    ƒêang x·ª≠ l√Ω
                                  </span>
                                )}
                              </div>
                            </div>

                            <div className="mt-3 p-3 bg-white rounded-lg border">
                              <h6 className="font-medium text-sm mb-2">
                                Chi ti·∫øt ƒë∆°n h√†ng:
                              </h6>
                              <p className="text-sm">{order.detail}</p>

                              <div className="mt-3 grid grid-cols-2 gap-2 text-sm">
                                <div>
                                  <span className="text-gray-600">
                                    V·ªã tr√≠ kho:
                                  </span>
                                  <span className="font-medium ml-1">
                                    {order.location}
                                  </span>
                                </div>
                                <div>
                                  <span className="text-gray-600">
                                    Lo·∫°i s·∫£n ph·∫©m:
                                  </span>
                                  <span className="font-medium ml-1">
                                    {order.productType}
                                  </span>
                                </div>
                                <div>
                                  <span className="text-gray-600">
                                    ƒê·ªô ph·ª©c t·∫°p:
                                  </span>
                                  <span className="font-medium ml-1">
                                    {order.complexity}
                                  </span>
                                </div>
                                <div>
                                  <span className="text-gray-600">
                                    M√£ ƒë∆°n v·∫≠n:
                                  </span>
                                  <span className="font-medium ml-1">
                                    {order.shipment_code || "N/A"}
                                  </span>
                                </div>
                              </div>
                            </div>

                            <div className="mt-4 flex justify-between items-center">
                              <div className="flex space-x-2">
                                <button
                                  className="px-3 py-1.5 bg-blue-100 text-blue-700 text-sm rounded flex items-center"
                                  onClick={() =>
                                    printSingleOrder(order.id, "print")
                                  }
                                >
                                  <Printer className="h-4 w-4 mr-1" />
                                  In ƒë∆°n
                                </button>

                                <button
                                  className="px-3 py-1.5 bg-green-100 text-green-700 text-sm rounded flex items-center"
                                  onClick={() =>
                                    printSingleOrder(order.id, "picking")
                                  }
                                >
                                  <FileText className="h-4 w-4 mr-1" />
                                  So·∫°n h√†ng
                                </button>
                              </div>

                              {index === 0 && (
                                <button
                                  className="px-3 py-1.5 bg-purple-600 text-white text-sm rounded flex items-center"
                                  onClick={() => markOrderAsCompleted(order.id)}
                                >
                                  <Check className="h-4 w-4 mr-1" />
                                  ƒê√°nh d·∫•u ho√†n th√†nh
                                </button>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              );
            })()}
          </div>
        </div>
      </div>
    );
  };

  const renderSettings = () => (
    <div className="mb-4 grid grid-cols-1 md:grid-cols-2 gap-4">
      <div className="bg-white rounded-lg p-4 shadow-sm">
        <h3 className="font-medium mb-3">C·∫•u h√¨nh SLA</h3>

        <div className="space-y-4">
          <div>
            <label className="text-sm text-gray-700 block mb-1">
              P1 - G·∫•p (d∆∞·ªõi x gi·ªù)
            </label>
            <input
              type="number"
              min="0.5"
              max="5"
              step="0.5"
              value={slaConfig.p1Hours}
              onChange={(e) =>
                setSlaConfig({
                  ...slaConfig,
                  p1Hours: parseFloat(e.target.value),
                })
              }
              className="w-full border border-gray-300 rounded px-3 py-2"
            />
            <div className="mt-1 text-xs text-gray-500">
              P1: C·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c
            </div>
          </div>

          <div>
            <label className="text-sm text-gray-700 block mb-1">
              P2 - C·∫£nh b√°o (d∆∞·ªõi x gi·ªù)
            </label>
            <input
              type="number"
              min="1"
              max="10"
              step="0.5"
              value={slaConfig.p2Hours}
              onChange={(e) =>
                setSlaConfig({
                  ...slaConfig,
                  p2Hours: parseFloat(e.target.value),
                })
              }
              className="w-full border border-gray-300 rounded px-3 py-2"
            />
            <div className="mt-1 text-xs text-gray-500">
              P2: Kh√¥ng th·ªÉ tr√¨ ho√£n qu√° l√¢u
            </div>
          </div>

          <div>
            <label className="text-sm text-gray-700 block mb-1">
              P3 - B√¨nh th∆∞·ªùng (d∆∞·ªõi x gi·ªù)
            </label>
            <input
              type="number"
              min="2"
              max="20"
              step="0.5"
              value={slaConfig.p3Hours}
              onChange={(e) =>
                setSlaConfig({
                  ...slaConfig,
                  p3Hours: parseFloat(e.target.value),
                })
              }
              className="w-full border border-gray-300 rounded px-3 py-2"
            />
            <div className="mt-1 text-xs text-gray-500">
              P3: X·ª≠ l√Ω theo l·ªô tr√¨nh h·ª£p l√Ω
            </div>
          </div>

          <div>
            <label className="text-sm text-gray-700 block mb-1">
              Th·ªùi gian SLA m·∫∑c ƒë·ªãnh (gi·ªù)
            </label>
            <input
              type="number"
              min="6"
              max="72"
              value={slaConfig.defaultSLA}
              onChange={(e) =>
                setSlaConfig({
                  ...slaConfig,
                  defaultSLA: parseInt(e.target.value),
                })
              }
              className="w-full border border-gray-300 rounded px-3 py-2"
            />
            <div className="mt-1 text-xs text-gray-500">
              Th·ªùi gian m·∫∑c ƒë·ªãnh ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg p-4 shadow-sm">
        <h3 className="font-medium mb-3">C·∫•u h√¨nh ph√¢n b·ªï ƒë∆°n h√†ng</h3>

        <div className="space-y-4">
          <div>
            <label className="text-sm text-gray-700 block mb-1">
              T·ª± ƒë·ªông ph√¢n b·ªï m·ªói (ph√∫t)
            </label>
            <input
              type="number"
              min="1"
              max="60"
              value={allocationConfig.autoAssignInterval}
              onChange={(e) =>
                setAllocationConfig({
                  ...allocationConfig,
                  autoAssignInterval: parseInt(e.target.value),
                })
              }
              className="w-full border border-gray-300 rounded px-3 py-2"
            />
            <div className="mt-1 text-xs text-gray-500">
              H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√¢n b·ªï ƒë∆°n h√†ng theo chu k·ª≥
            </div>
          </div>

          <div>
            <label className="text-sm text-gray-700 block mb-1">
              T·ªëi ƒëa ƒë∆°n P1 m·ªói nh√¢n vi√™n
            </label>
            <input
              type="number"
              min="1"
              max="10"
              value={allocationConfig.p1MaxPerStaff}
              onChange={(e) =>
                setAllocationConfig({
                  ...allocationConfig,
                  p1MaxPerStaff: parseInt(e.target.value),
                })
              }
              className="w-full border border-gray-300 rounded px-3 py-2"
            />
            <div className="mt-1 text-xs text-gray-500">
              Gi·ªõi h·∫°n s·ªë ƒë∆°n P1 m√† m·ªôt nh√¢n vi√™n c√≥ th·ªÉ x·ª≠ l√Ω ƒë·ªìng th·ªùi
            </div>
          </div>

          <div className="space-y-2">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={allocationConfig.balanceWorkload}
                onChange={(e) =>
                  setAllocationConfig({
                    ...allocationConfig,
                    balanceWorkload: e.target.checked,
                  })
                }
                className="mr-2 rounded"
              />
              <span className="text-sm text-gray-700">
                C√¢n b·∫±ng kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác
              </span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={allocationConfig.prioritizeLocation}
                onChange={(e) =>
                  setAllocationConfig({
                    ...allocationConfig,
                    prioritizeLocation: e.target.checked,
                  })
                }
                className="mr-2 rounded"
              />
              <span className="text-sm text-gray-700">
                ∆Øu ti√™n theo khu v·ª±c
              </span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={allocationConfig.reassignOnCompletion}
                onChange={(e) =>
                  setAllocationConfig({
                    ...allocationConfig,
                    reassignOnCompletion: e.target.checked,
                  })
                }
                className="mr-2 rounded"
              />
              <span className="text-sm text-gray-700">
                T·ª± ƒë·ªông g√°n l·∫°i khi ho√†n th√†nh
              </span>
            </label>
          </div>
        </div>
      </div>

      <div className="md:col-span-2 bg-white rounded-lg p-4 shadow-sm">
        <div className="flex justify-between items-center mb-3">
          <h3 className="font-medium">L·ªãch s·ª≠ ho·∫°t ƒë·ªông</h3>

          <button
            className="px-3 py-1.5 bg-blue-100 text-blue-700 text-sm rounded flex items-center"
            onClick={downloadActivityHistory}
            disabled={activityHistory.length === 0}
          >
            <Download className="h-4 w-4 mr-1" />
            <span>Xu·∫•t CSV</span>
          </button>
        </div>

        <div className="max-h-96 overflow-y-auto divide-y divide-gray-100">
          {activityHistory.map((activity, index) => (
            <div key={index} className="py-2">
              <div className="flex justify-between">
                <span className="font-medium text-sm">
                  {activity.type === "auto_assign" && "T·ª± ƒë·ªông ph√¢n b·ªï"}
                  {activity.type === "manual_assign" && "Ph√¢n b·ªï th·ªß c√¥ng"}
                  {activity.type === "complete" && "Ho√†n th√†nh ƒë∆°n"}
                  {activity.type === "upload" && "T·∫£i l√™n ƒë∆°n h√†ng"}
                  {activity.type === "system" && "H·ªá th·ªëng"}
                  {activity.type === "print_order" && "In ƒë∆°n h√†ng"}
                  {activity.type === "print_picking" && "So·∫°n h√†ng"}
                  {activity.type === "unassign" && "H·ªßy ph√¢n c√¥ng"}
                  {activity.type === "sla_escalation" && "N√¢ng c·∫•p SLA"}
                  {activity.type === "export_history" && "Xu·∫•t l·ªãch s·ª≠"}
                </span>
                <span className="text-sm text-gray-500">
                  {new Date(activity.timestamp).toLocaleString("vi-VN")}
                </span>
              </div>
              <div className="mt-1 text-sm">{activity.details}</div>
              {(activity.orderId || activity.staffId) && (
                <div className="mt-1 text-xs text-gray-500">
                  {activity.orderId && (
                    <span className="mr-3">
                      ƒê∆°n: {activity.orderName || activity.orderId}
                    </span>
                  )}
                  {activity.staffId && (
                    <span>
                      Nh√¢n vi√™n: {activity.staffName || activity.staffId}
                    </span>
                  )}
                </div>
              )}
            </div>
          ))}

          {activityHistory.length === 0 && (
            <div className="py-4 text-center text-gray-500">
              Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o ƒë∆∞·ª£c ghi l·∫°i
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderLayoutOptimization = () => (
    <div className="mb-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="font-medium">T·ªëi ∆∞u Layout v√† L·ªô tr√¨nh l·∫•y h√†ng</h3>

        <button
          className="px-3 py-1.5 bg-purple-100 text-purple-700 text-sm rounded flex items-center"
          onClick={() => {}}
        >
          <TrendingUp className="h-4 w-4 mr-1" />
          <span>T·∫°o l·ªô tr√¨nh m·ªõi</span>
        </button>
      </div>

      {/* B·∫£n ƒë·ªì nhi·ªát kho */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div className="md:col-span-2 bg-white rounded-lg p-4 shadow-sm">
          <h4 className="font-medium mb-3">B·∫£n ƒë·ªì nhi·ªát ho·∫°t ƒë·ªông kho</h4>

          <div className="h-64 relative overflow-hidden mb-3">
            {/* Gi·∫£ l·∫≠p b·∫£n ƒë·ªì nhi·ªát v·ªõi Grid */}
            <div className="grid grid-cols-8 gap-1">
              {Array.from({ length: 40 }).map((_, index) => {
                // T·∫°o m√£ m√†u ng·∫´u nhi√™n d·ª±a tr√™n m·ª©c ƒë·ªô ho·∫°t ƒë·ªông
                const activity = Math.floor(Math.random() * 100);
                let bgColor = "bg-blue-100";

                if (activity > 80) bgColor = "bg-red-100";
                else if (activity > 60) bgColor = "bg-orange-100";
                else if (activity > 40) bgColor = "bg-yellow-100";
                else if (activity > 20) bgColor = "bg-green-100";

                // X√°c ƒë·ªãnh khu v·ª±c
                const row = Math.floor(index / 8);
                const col = index % 8;
                const zone = String.fromCharCode(65 + Math.floor(col / 2)); // A, B, C, D

                return (
                  <div
                    key={index}
                    className={`${bgColor} rounded-sm h-10 flex items-center justify-center relative ${
                      col % 2 === 0 ? "border-l-2 border-gray-400" : ""
                    }`}
                    title={`Khu ${zone}: ${activity}% ho·∫°t ƒë·ªông`}
                  >
                    <span className="text-xs font-medium">{zone}</span>
                    {activity > 80 && (
                      <div className="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>

          <div className="flex justify-between items-center">
            <div className="flex space-x-1 text-xs">
              <span className="bg-blue-100 px-2 py-0.5 rounded">Th·∫•p</span>
              <span className="bg-green-100 px-2 py-0.5 rounded"></span>
              <span className="bg-yellow-100 px-2 py-0.5 rounded"></span>
              <span className="bg-orange-100 px-2 py-0.5 rounded"></span>
              <span className="bg-red-100 px-2 py-0.5 rounded">Cao</span>
            </div>

            <div className="text-xs text-gray-500">
              * M√†u ƒë·∫≠m = ho·∫°t ƒë·ªông cao | ƒêi·ªÉm ƒë·ªè = c·∫ßn b·ªï sung nh√¢n vi√™n
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h4 className="font-medium mb-3">Hi·ªáu su·∫•t theo khu v·ª±c</h4>

          <div className="space-y-3">
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>Khu A</span>
                <span>85%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-blue-500 h-2 rounded-full"
                  style={{ width: "85%" }}
                ></div>
              </div>
            </div>

            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>Khu B</span>
                <span>72%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-green-500 h-2 rounded-full"
                  style={{ width: "72%" }}
                ></div>
              </div>
            </div>

            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>Khu C</span>
                <span>94%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-red-500 h-2 rounded-full"
                  style={{ width: "94%" }}
                ></div>
              </div>
            </div>

            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>Khu D</span>
                <span>65%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-yellow-500 h-2 rounded-full"
                  style={{ width: "65%" }}
                ></div>
              </div>
            </div>
          </div>

          <div className="mt-4 pt-4 border-t border-gray-100">
            <div className="text-sm font-medium mb-2">ƒê·ªÅ xu·∫•t t·ªëi ∆∞u</div>
            <div className="space-y-2 text-xs text-gray-700">
              <div className="flex items-start">
                <div className="bg-red-100 text-red-800 px-1.5 py-0.5 rounded mr-2">
                  Khu C
                </div>
                <div>Di chuy·ªÉn SKU ph·ªï bi·∫øn ra g·∫ßn l·ªëi ƒëi ch√≠nh</div>
              </div>
              <div className="flex items-start">
                <div className="bg-blue-100 text-blue-800 px-1.5 py-0.5 rounded mr-2">
                  Khu A
                </div>
                <div>Th√™m nh√¢n vi√™n v√†o gi·ªù cao ƒëi·ªÉm (9-11h)</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Hot SKUs v√† ƒë·ªÅ xu·∫•t t·ªëi ∆∞u */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h4 className="font-medium mb-3">Top SKUs ph·ªï bi·∫øn</h4>

          <div className="space-y-3 mb-4">
            {[
              {
                sku: "ID2041_20",
                name: 'Valinice Yari 20"',
                count: 8,
                location: "A1-01",
              },
              {
                sku: "BR0224_23",
                name: 'Balore Rio 23"',
                count: 6,
                location: "A3-05",
              },
              {
                sku: "LUGHTAG-S",
                name: "Mia Luggage Tag",
                count: 5,
                location: "B5-03",
              },
              {
                sku: "CWGC_20",
                name: 'Clearguard Cover 20"',
                count: 4,
                location: "B2-08",
              },
              {
                sku: "CMKD-7ML",
                name: "Cerave Kem d∆∞·ª°ng ·∫©m 7ml",
                count: 4,
                location: "C1-12",
              },
            ].map((item, index) => (
              <div key={index} className="flex items-center justify-between">
                <div>
                  <div className="font-medium text-sm">{item.sku}</div>
                  <div className="text-xs text-gray-500">{item.name}</div>
                </div>
                <div className="text-right">
                  <div className="text-sm font-medium">{item.count} ƒë∆°n</div>
                  <div className="text-xs bg-blue-100 text-blue-800 px-1.5 py-0.5 rounded">
                    {item.location}
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="text-xs text-gray-500 text-center">
            * S·ªë li·ªáu d·ª±a tr√™n 50 ƒë∆°n g·∫ßn nh·∫•t
          </div>
        </div>

        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h4 className="font-medium mb-3">ƒê·ªÅ xu·∫•t t√°i b·ªë tr√≠ kho</h4>

          <div className="space-y-3">
            <div className="p-3 border border-green-100 bg-green-50 rounded-lg">
              <div className="font-medium text-sm">Di chuy·ªÉn SKUs ph·ªï bi·∫øn</div>
              <div className="mt-1 space-y-1 text-xs">
                <div className="flex justify-between">
                  <span>ID2041_20</span>
                  <div className="flex items-center">
                    <span className="px-1.5 py-0.5 bg-blue-100 text-blue-800 rounded">
                      A1-01
                    </span>
                    <ArrowRight className="h-3 w-3 mx-1" />
                    <span className="px-1.5 py-0.5 bg-green-100 text-green-800 rounded">
                      A0-05
                    </span>
                  </div>
                </div>
                <div className="flex justify-between">
                  <span>CMKD-7ML</span>
                  <div className="flex items-center">
                    <span className="px-1.5 py-0.5 bg-blue-100 text-blue-800 rounded">
                      C1-12
                    </span>
                    <ArrowRight className="h-3 w-3 mx-1" />
                    <span className="px-1.5 py-0.5 bg-green-100 text-green-800 rounded">
                      B3-02
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="p-3 border border-yellow-100 bg-yellow-50 rounded-lg">
              <div className="font-medium text-sm">Nh√≥m SKUs li√™n quan</div>
              <div className="mt-1 space-y-1 text-xs">
                <div>
                  <div className="font-medium">Nh√≥m Vali + Tag</div>
                  <div className="flex justify-between mt-1">
                    <span>ID2041_20 + LUGHTAG-S</span>
                    <span className="px-1.5 py-0.5 bg-yellow-100 text-yellow-800 rounded">
                      8 ƒë∆°n
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="p-3 border border-blue-100 bg-blue-50 rounded-lg">
              <div className="font-medium text-sm">
                Khu v·ª±c ƒë·ªÅ xu·∫•t gi√£n r·ªông
              </div>
              <div className="mt-1 text-xs">
                Khu v·ª±c B ƒëang ho·∫°t ƒë·ªông v·ªõi c√¥ng su·∫•t cao, c·∫ßn m·ªü r·ªông th√™m 2
                gi√° k·ªá
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h4 className="font-medium mb-3">L·ªô tr√¨nh l·∫•y h√†ng t·ªëi ∆∞u</h4>

          <div className="space-y-4">
            <div className="p-3 border border-blue-100 bg-blue-50 rounded-lg">
              <div className="font-medium text-sm">P1 - ƒê∆°n g·∫•p</div>
              <div className="mt-2 grid grid-cols-4 gap-2 text-xs">
                <div className="bg-white px-2 py-1 rounded text-center">
                  A1-01
                </div>
                <div className="bg-white px-2 py-1 rounded text-center">
                  A3-05
                </div>
                <div className="bg-white px-2 py-1 rounded text-center">
                  B5-03
                </div>
                <div className="bg-white px-2 py-1 rounded text-center">
                  C1-12
                </div>
              </div>
              <div className="mt-2 text-xs text-gray-600">
                <div>‚Ä¢ L·ªô tr√¨nh: Z (Theo h√†ng ngang)</div>
                <div>‚Ä¢ ∆Øu ti√™n: Theo SLA</div>
                <div>‚Ä¢ Th·ªùi gian d·ª± ki·∫øn: 8 ph√∫t</div>
              </div>
            </div>

            <div className="p-3 border border-green-100 bg-green-50 rounded-lg">
              <div className="font-medium text-sm">ƒê∆°n c√πng lo·∫°i</div>
              <div className="mt-2 grid grid-cols-6 gap-1 text-xs">
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  A1-01
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  A1-02
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  A1-05
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  A2-01
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  A2-08
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  A3-03
                </div>
              </div>
              <div className="mt-2 text-xs text-gray-600">
                <div>‚Ä¢ L·ªô tr√¨nh: U (Theo d√£y k·ªá)</div>
                <div>‚Ä¢ ∆Øu ti√™n: Theo s·∫£n ph·∫©m</div>
                <div>‚Ä¢ Th·ªùi gian d·ª± ki·∫øn: 12 ph√∫t</div>
              </div>
            </div>

            <div className="p-3 border border-purple-100 bg-purple-50 rounded-lg">
              <div className="font-medium text-sm">ƒê∆°n ph·ª• ki·ªán</div>
              <div className="mt-2 grid grid-cols-5 gap-1 text-xs">
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  B2-08
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  B3-02
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  B5-03
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  C1-12
                </div>
                <div className="bg-white px-1.5 py-1 rounded text-center">
                  C3-05
                </div>
              </div>
              <div className="mt-2 text-xs text-gray-600">
                <div>‚Ä¢ L·ªô tr√¨nh: S (H√¨nh ch·ªØ S)</div>
                <div>‚Ä¢ ∆Øu ti√™n: Theo khu v·ª±c</div>
                <div>‚Ä¢ Th·ªùi gian d·ª± ki·∫øn: 10 ph√∫t</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* B√°o c√°o t·ªëi ∆∞u v√† hi·ªáu su·∫•t */}
      <div className="bg-white rounded-lg p-4 shadow-sm">
        <h4 className="font-medium mb-3">B√°o c√°o hi·ªáu su·∫•t v√† t·ªëi ∆∞u</h4>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="p-3 border rounded-lg">
            <div className="text-xl font-bold">27%</div>
            <div className="text-sm text-gray-500">
              Gi·∫£m th·ªùi gian di chuy·ªÉn
            </div>
            <div className="mt-2 text-xs">Sau khi √°p d·ª•ng l·ªô tr√¨nh t·ªëi ∆∞u</div>
          </div>

          <div className="p-3 border rounded-lg">
            <div className="text-xl font-bold">15%</div>
            <div className="text-sm text-gray-500">TƒÉng ƒë∆°n x·ª≠ l√Ω / gi·ªù</div>
            <div className="mt-2 text-xs">Sau khi ƒëi·ªÅu ch·ªânh layout kho</div>
          </div>

          <div className="p-3 border rounded-lg">
            <div className="text-xl font-bold">38%</div>
            <div className="text-sm text-gray-500">Gi·∫£m t·∫Øc ngh·∫Ωn kho</div>
            <div className="mt-2 text-xs">Nh·ªù ph√¢n b·ªï nh√¢n s·ª± h·ª£p l√Ω</div>
          </div>

          <div className="p-3 border rounded-lg">
            <div className="text-xl font-bold">92%</div>
            <div className="text-sm text-gray-500">ƒê∆°n tu√¢n th·ªß SLA</div>
            <div className="mt-2 text-xs">TƒÉng 8% so v·ªõi th√°ng tr∆∞·ªõc</div>
          </div>
        </div>

        <div className="mt-4 text-sm text-center text-gray-500">
          ƒê√°nh gi√° ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o 30/03/2025 - 10:45
        </div>
      </div>
    </div>
  );

  // Render modal in ƒë∆°n h√†ng
  const renderPrintModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg max-w-lg w-full p-6">
        <h3 className="text-lg font-medium mb-4">
          {printType === "order" ? "In ƒë∆°n h√†ng" : "So·∫°n h√†ng"}
        </h3>

        <p className="text-sm text-gray-600 mb-4">
          B·∫°n ƒëang {printType === "order" ? "in" : "so·∫°n h√†ng"} cho{" "}
          {selectedOrders.length} ƒë∆°n h√†ng.
        </p>

        <div className="max-h-48 overflow-y-auto mb-4">
          <ul className="space-y-1 text-sm">
            {selectedOrders.map((orderId) => {
              const order = orders.find((o) => o.id === orderId);
              return (
                <li key={orderId} className="flex items-center justify-between">
                  <span>{order?.name || orderId}</span>
                  <span
                    className={`px-1.5 py-0.5 text-xs rounded-full ${order?.sla.color || "bg-gray-100"}`}
                  >
                    {order?.sla.code || "-"}
                  </span>
                </li>
              );
            })}
          </ul>
        </div>

        <div className="bg-gray-50 p-3 rounded border mb-4 text-sm">
          <div className="font-medium mb-1">
            URL d√πng ƒë·ªÉ {printType === "order" ? "in" : "so·∫°n h√†ng"}:
          </div>
          <div className="font-mono text-xs overflow-x-auto whitespace-nowrap">
            {printType === "order"
              ? `https://one.tga.com.vn/so/invoicePrint?id=${selectedOrders.join(",")}`
              : `https://one.tga.com.vn/so/prepare?id=${selectedOrders.join(",")}`}
          </div>
        </div>

        <div className="flex justify-end space-x-3">
          <button
            className="px-3 py-1.5 border text-sm rounded"
            onClick={() => setShowPrintModal(false)}
          >
            H·ªßy
          </button>

          <button
            className="px-3 py-1.5 bg-blue-600 text-white text-sm rounded flex items-center"
            onClick={printOrders}
          >
            {printType === "order" ? (
              <>
                <Printer className="h-4 w-4 mr-1" />
                <span>In ƒë∆°n</span>
              </>
            ) : (
              <>
                <FileText className="h-4 w-4 mr-1" />
                <span>So·∫°n h√†ng</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-xl font-bold">
            H·ªá th·ªëng qu·∫£n l√Ω x·ª≠ l√Ω ƒë∆°n h√†ng theo SLA
          </h1>
          <p className="text-sm text-gray-500">
            Ng√†y {new Date().toLocaleDateString("vi-VN")} | C·∫≠p nh·∫≠t g·∫ßn nh·∫•t:{" "}
            {lastUpdatedRef.current.toLocaleTimeString("vi-VN")}
          </p>
        </div>

        <div className="flex items-center space-x-2">
          <div className="flex items-center mr-2">
            <span className="text-sm mr-2">T·ª± ƒë·ªông c·∫≠p nh·∫≠t</span>
            <div className="relative">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={autoRefresh}
                onChange={() => setAutoRefresh(!autoRefresh)}
              />
              <div className="w-11 h-6 bg-gray-300 peer-checked:bg-blue-500 rounded-full transition-colors duration-300"></div>
              <div className="absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full shadow-md transform peer-checked:translate-x-full transition-transform duration-300"></div>
            </div>
          </div>

          <button
            className={`px-3 py-1.5 rounded text-sm flex items-center ${
              isLoading
                ? "bg-gray-200 text-gray-600"
                : "bg-blue-600 text-white hover:bg-blue-700"
            }`}
            onClick={updateRealTimeData}
            disabled={isLoading}
          >
            <RefreshCw
              className={`h-4 w-4 mr-1 ${isLoading ? "animate-spin" : ""}`}
            />
            <span>{isLoading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t"}</span>
          </button>

          <button
            className="px-3 py-1.5 bg-white border text-sm rounded text-gray-700 hover:bg-gray-50 flex items-center"
            onClick={() => fileInputRef.current.click()}
          >
            <Upload className="h-4 w-4 mr-1" />
            <span>T·∫£i l√™n ƒë∆°n h√†ng</span>
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileSelect}
              accept=".json"
              className="hidden"
            />
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div className="flex border-b mb-4">
        <button
          className={`px-4 py-2 text-sm font-medium ${
            tab === "dashboard"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500"
          }`}
          onClick={() => setTab("dashboard")}
        >
          T·ªïng quan
        </button>

        <button
          className={`px-4 py-2 text-sm font-medium ${
            tab === "orders"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500"
          }`}
          onClick={() => setTab("orders")}
        >
          ƒê∆°n h√†ng
        </button>

        <button
          className={`px-4 py-2 text-sm font-medium ${
            tab === "staff"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500"
          }`}
          onClick={() => setTab("staff")}
        >
          Nh√¢n s·ª±
        </button>

        <button
          className={`px-4 py-2 text-sm font-medium ${
            tab === "layout"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500"
          }`}
          onClick={() => setTab("layout")}
        >
          Layout & L·ªô tr√¨nh
        </button>

        <button
          className={`px-4 py-2 text-sm font-medium ${
            tab === "settings"
              ? "text-blue-600 border-b-2 border-blue-600"
              : "text-gray-500"
          }`}
          onClick={() => setTab("settings")}
        >
          C√†i ƒë·∫∑t
        </button>
      </div>

      {/* Main content based on active tab */}
      {tab === "dashboard" && renderDashboard()}
      {tab === "orders" && renderOrders()}
      {tab === "staff" && renderStaff()}
      {tab === "layout" && renderLayoutOptimization()}
      {tab === "settings" && renderSettings()}

      {/* Print Modal */}
      {showPrintModal && renderPrintModal()}

      {/* Staff Panel */}
      {showStaffPanel && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-5xl w-full p-6 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Qu·∫£n l√Ω nh√¢n s·ª±</h3>
              <button
                className="text-gray-500 hover:text-gray-700"
                onClick={() => setShowStaffPanel(false)}
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            {renderStaff()}
          </div>
        </div>
      )}

      {/* Activity History Panel */}
      {showActivityHistory && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-4xl w-full p-6 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">L·ªãch s·ª≠ ho·∫°t ƒë·ªông</h3>
              <div className="flex items-center space-x-2">
                <button
                  className="px-3 py-1.5 bg-blue-100 text-blue-700 text-sm rounded flex items-center"
                  onClick={downloadActivityHistory}
                  disabled={activityHistory.length === 0}
                >
                  <Download className="h-4 w-4 mr-1" />
                  <span>Xu·∫•t CSV</span>
                </button>
                <button
                  className="text-gray-500 hover:text-gray-700"
                  onClick={() => setShowActivityHistory(false)}
                >
                  <X className="h-5 w-5" />
                </button>
              </div>
            </div>

            <div className="divide-y divide-gray-100">
              {activityHistory.map((activity, index) => (
                <div key={index} className="py-3">
                  <div className="flex justify-between">
                    <span className="font-medium">
                      {activity.type === "auto_assign" && "T·ª± ƒë·ªông ph√¢n b·ªï"}
                      {activity.type === "manual_assign" && "Ph√¢n b·ªï th·ªß c√¥ng"}
                      {activity.type === "complete" && "Ho√†n th√†nh ƒë∆°n"}
                      {activity.type === "upload" && "T·∫£i l√™n ƒë∆°n h√†ng"}
                      {activity.type === "system" && "H·ªá th·ªëng"}
                      {activity.type === "print_order" && "In ƒë∆°n h√†ng"}
                      {activity.type === "print_picking" && "So·∫°n h√†ng"}
                      {activity.type === "unassign" && "H·ªßy ph√¢n c√¥ng"}
                      {activity.type === "sla_escalation" && "N√¢ng c·∫•p SLA"}
                    </span>
                    <span className="text-sm text-gray-500">
                      {new Date(activity.timestamp).toLocaleString("vi-VN")}
                    </span>
                  </div>
                  <div className="mt-1">{activity.details}</div>
                  {(activity.orderId || activity.staffId) && (
                    <div className="mt-1 text-sm text-gray-500">
                      {activity.orderId && (
                        <span className="mr-3">
                          ƒê∆°n: {activity.orderName || activity.orderId}
                        </span>
                      )}
                      {activity.staffId && (
                        <span>
                          Nh√¢n vi√™n: {activity.staffName || activity.staffId}
                        </span>
                      )}
                    </div>
                  )}
                </div>
              ))}

              {activityHistory.length === 0 && (
                <div className="py-4 text-center text-gray-500">
                  Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o ƒë∆∞·ª£c ghi l·∫°i
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Allocation Panel */}
      {showAllocationPanel && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-5xl w-full p-6 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Ph√¢n b·ªï ƒë∆°n h√†ng t·ª± ƒë·ªông</h3>
              <button
                className="text-gray-500 hover:text-gray-700"
                onClick={() => setShowAllocationPanel(false)}
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-medium mb-3">Danh s√°ch ƒë∆°n ch·ªù x·ª≠ l√Ω</h4>

                <div className="bg-white border rounded-lg overflow-hidden">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          M√£ ƒë∆°n
                        </th>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          SLA
                        </th>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Lo·∫°i SP
                        </th>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          V·ªã tr√≠
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {orders
                        .filter((order) => order.status === "pending")
                        .slice(0, 6)
                        .map((order) => (
                          <tr
                            key={order.id}
                            className={
                              order.sla.code === "P1" ? "bg-red-50" : ""
                            }
                          >
                            <td className="px-3 py-2 whitespace-nowrap text-sm">
                              {order.name}
                            </td>
                            <td className="px-3 py-2 whitespace-nowrap">
                              <span
                                className={`px-2 py-0.5 text-xs rounded-full ${order.sla.color}`}
                              >
                                {order.sla.code}
                              </span>
                            </td>
                            <td className="px-3 py-2 whitespace-nowrap text-sm">
                              {order.productType}
                            </td>
                            <td className="px-3 py-2 whitespace-nowrap">
                              <span className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">
                                {order.location}
                              </span>
                            </td>
                          </tr>
                        ))}
                    </tbody>
                  </table>
                </div>

                <div className="mt-4">
                  <h4 className="font-medium mb-3">C·∫•u h√¨nh ph√¢n b·ªï</h4>

                  <div className="space-y-3">
                    <div>
                      <label className="text-sm text-gray-700 block mb-1">
                        T·ªëi ƒëa ƒë∆°n P1 m·ªói nh√¢n vi√™n
                      </label>
                      <input
                        type="number"
                        min="1"
                        max="10"
                        value={allocationConfig.p1MaxPerStaff}
                        onChange={(e) =>
                          setAllocationConfig({
                            ...allocationConfig,
                            p1MaxPerStaff: parseInt(e.target.value),
                          })
                        }
                        className="w-full border border-gray-300 rounded px-3 py-2 text-sm"
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={allocationConfig.balanceWorkload}
                          onChange={(e) =>
                            setAllocationConfig({
                              ...allocationConfig,
                              balanceWorkload: e.target.checked,
                            })
                          }
                          className="mr-2 rounded"
                        />
                        <span className="text-sm text-gray-700">
                          C√¢n b·∫±ng kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác
                        </span>
                      </label>

                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={allocationConfig.prioritizeLocation}
                          onChange={(e) =>
                            setAllocationConfig({
                              ...allocationConfig,
                              prioritizeLocation: e.target.checked,
                            })
                          }
                          className="mr-2 rounded"
                        />
                        <span className="text-sm text-gray-700">
                          ∆Øu ti√™n theo khu v·ª±c
                        </span>
                      </label>
                    </div>

                    <div className="pt-3">
                      <button
                        className={`w-full px-3 py-2 rounded text-sm flex items-center justify-center ${
                          isAutoAssigning
                            ? "bg-gray-200 text-gray-600"
                            : "bg-blue-600 text-white hover:bg-blue-700"
                        }`}
                        onClick={autoAssignOrders}
                        disabled={isAutoAssigning}
                      >
                        <RefreshCw
                          className={`h-4 w-4 mr-1 ${isAutoAssigning ? "animate-spin" : ""}`}
                        />
                        <span>
                          {isAutoAssigning
                            ? "ƒêang ph√¢n b·ªï..."
                            : "Ph√¢n b·ªï t·ª± ƒë·ªông"}
                        </span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <h4 className="font-medium mb-3">Nh√¢n vi√™n s·∫µn s√†ng</h4>

                <div className="space-y-2">
                  {staff
                    .filter((s) => s.status === "available")
                    .map((person) => (
                      <div
                        key={person.id}
                        className="p-3 bg-green-50 border border-green-100 rounded-lg"
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <div className="font-medium">{person.name}</div>
                            <div className="text-xs text-gray-500 mt-1">
                              {person.role} ‚Ä¢ Khu {person.area}
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-sm">
                              {person.currentLoad}/{person.maxCapacity} ƒë∆°n
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                              Hi·ªáu su·∫•t: {person.efficiency}%
                            </div>
                          </div>
                        </div>

                        <div className="mt-2 flex flex-wrap gap-1">
                          {person.skills.map((skill, index) => (
                            <span
                              key={index}
                              className="px-1.5 py-0.5 bg-green-100 text-green-800 rounded text-xs"
                            >
                              {skill}
                            </span>
                          ))}
                        </div>
                      </div>
                    ))}

                  {staff.filter((s) => s.status === "available").length ===
                    0 && (
                    <div className="p-4 text-center text-gray-500 bg-gray-50 rounded-lg">
                      Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒëang s·∫µn s√†ng
                    </div>
                  )}
                </div>

                <div className="mt-4">
                  <h4 className="font-medium mb-3">Quy t·∫Øc ph√¢n b·ªï</h4>

                  <div className="space-y-2 text-sm">
                    <div className="flex items-start">
                      <div className="bg-red-100 text-red-800 px-2 py-0.5 rounded mr-2 whitespace-nowrap">
                        P1
                      </div>
                      <div className="text-gray-700">
                        P1 x·ª≠ l√Ω ∆∞u ti√™n 100%, ph√¢n cho nh√¢n vi√™n c√≥ kh·∫£ nƒÉng x·ª≠
                        l√Ω P1
                      </div>
                    </div>

                    <div className="flex items-start">
                      <div className="bg-blue-100 text-blue-800 px-2 py-0.5 rounded mr-2 whitespace-nowrap">
                        V·ªã tr√≠
                      </div>
                      <div className="text-gray-700">
                        ∆Øu ti√™n ph√¢n b·ªï theo v·ªã tr√≠ kho g·∫ßn nh·∫•t v·ªõi nh√¢n vi√™n
                      </div>
                    </div>

                    <div className="flex items-start">
                      <div className="bg-green-100 text-green-800 px-2 py-0.5 rounded mr-2 whitespace-nowrap">
                        K·ªπ nƒÉng
                      </div>
                      <div className="text-gray-700">
                        ∆Øu ti√™n nh√¢n vi√™n c√≥ k·ªπ nƒÉng ph√π h·ª£p v·ªõi lo·∫°i s·∫£n ph·∫©m
                      </div>
                    </div>

                    <div className="flex items-start">
                      <div className="bg-purple-100 text-purple-800 px-2 py-0.5 rounded mr-2 whitespace-nowrap">
                        C√¢n b·∫±ng
                      </div>
                      <div className="text-gray-700">
                        C√¢n b·∫±ng t·∫£i cho nh√¢n vi√™n, kh√¥ng qu√° t·∫£i ƒë∆°n
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OrderSLAManagementSystem;
